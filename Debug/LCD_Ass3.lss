
LCD_Ass3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003658  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00003658  000036cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002370  00000000  00000000  00003814  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c5f  00000000  00000000  00005b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000067e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006983  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a306  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b992  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 fd 11 	call	0x23fa	; 0x23fa <main>
      7a:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e9       	ldi	r26, 0x9E	; 158
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e9       	ldi	r24, 0x9E	; 158
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6e e9       	ldi	r22, 0x9E	; 158
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ea 55       	subi	r30, 0x5A	; 90
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,
		u8 Copy_u8PinDirection) {
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	2e 97       	sbiw	r28, 0x0e	; 14
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	6b 83       	std	Y+3, r22	; 0x03
     e36:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)) {
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	84 30       	cpi	r24, 0x04	; 4
     e40:	08 f0       	brcs	.+2      	; 0xe44 <DIO_u8SetPinDirection+0x26>
     e42:	6a c1       	rjmp	.+724    	; 0x1118 <DIO_u8SetPinDirection+0x2fa>
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	88 30       	cpi	r24, 0x08	; 8
     e48:	08 f0       	brcs	.+2      	; 0xe4c <DIO_u8SetPinDirection+0x2e>
     e4a:	66 c1       	rjmp	.+716    	; 0x1118 <DIO_u8SetPinDirection+0x2fa>
		switch (Copy_u8PortId) {
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3e 87       	std	Y+14, r19	; 0x0e
     e54:	2d 87       	std	Y+13, r18	; 0x0d
     e56:	8d 85       	ldd	r24, Y+13	; 0x0d
     e58:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	91 05       	cpc	r25, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <DIO_u8SetPinDirection+0x44>
     e60:	68 c0       	rjmp	.+208    	; 0xf32 <DIO_u8SetPinDirection+0x114>
     e62:	2d 85       	ldd	r18, Y+13	; 0x0d
     e64:	3e 85       	ldd	r19, Y+14	; 0x0e
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <DIO_u8SetPinDirection+0x58>
     e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	71 f0       	breq	.+28     	; 0xe90 <DIO_u8SetPinDirection+0x72>
     e74:	52 c1       	rjmp	.+676    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
     e76:	2d 85       	ldd	r18, Y+13	; 0x0d
     e78:	3e 85       	ldd	r19, Y+14	; 0x0e
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <DIO_u8SetPinDirection+0x64>
     e80:	a9 c0       	rjmp	.+338    	; 0xfd4 <DIO_u8SetPinDirection+0x1b6>
     e82:	8d 85       	ldd	r24, Y+13	; 0x0d
     e84:	9e 85       	ldd	r25, Y+14	; 0x0e
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_u8SetPinDirection+0x70>
     e8c:	f4 c0       	rjmp	.+488    	; 0x1076 <DIO_u8SetPinDirection+0x258>
     e8e:	45 c1       	rjmp	.+650    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection) {
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	3c 87       	std	Y+12, r19	; 0x0c
     e98:	2b 87       	std	Y+11, r18	; 0x0b
     e9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	91 05       	cpc	r25, r1
     ea2:	89 f1       	breq	.+98     	; 0xf06 <DIO_u8SetPinDirection+0xe8>
     ea4:	2b 85       	ldd	r18, Y+11	; 0x0b
     ea6:	3c 85       	ldd	r19, Y+12	; 0x0c
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	29 f0       	breq	.+10     	; 0xeb8 <DIO_u8SetPinDirection+0x9a>
     eae:	8b 85       	ldd	r24, Y+11	; 0x0b
     eb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	99 f0       	breq	.+38     	; 0xedc <DIO_u8SetPinDirection+0xbe>
     eb6:	3b c0       	rjmp	.+118    	; 0xf2e <DIO_u8SetPinDirection+0x110>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
     eb8:	ab e3       	ldi	r26, 0x3B	; 59
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	eb e3       	ldi	r30, 0x3B	; 59
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_u8SetPinDirection+0xb6>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	2a 95       	dec	r18
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_u8SetPinDirection+0xb2>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     edc:	aa e3       	ldi	r26, 0x3A	; 58
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ea e3       	ldi	r30, 0x3A	; 58
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_u8SetPinDirection+0xdc>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_u8SetPinDirection+0xd8>
     efe:	80 95       	com	r24
     f00:	84 23       	and	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	0a c1       	rjmp	.+532    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     f06:	aa e3       	ldi	r26, 0x3A	; 58
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea e3       	ldi	r30, 0x3A	; 58
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_u8SetPinDirection+0x106>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_u8SetPinDirection+0x102>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	f6 c0       	rjmp	.+492    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	f4 c0       	rjmp	.+488    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection) {
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3a 87       	std	Y+10, r19	; 0x0a
     f3a:	29 87       	std	Y+9, r18	; 0x09
     f3c:	89 85       	ldd	r24, Y+9	; 0x09
     f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	89 f1       	breq	.+98     	; 0xfa8 <DIO_u8SetPinDirection+0x18a>
     f46:	29 85       	ldd	r18, Y+9	; 0x09
     f48:	3a 85       	ldd	r19, Y+10	; 0x0a
     f4a:	22 30       	cpi	r18, 0x02	; 2
     f4c:	31 05       	cpc	r19, r1
     f4e:	29 f0       	breq	.+10     	; 0xf5a <DIO_u8SetPinDirection+0x13c>
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	99 f0       	breq	.+38     	; 0xf7e <DIO_u8SetPinDirection+0x160>
     f58:	3b c0       	rjmp	.+118    	; 0xfd0 <DIO_u8SetPinDirection+0x1b2>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
     f5a:	a8 e3       	ldi	r26, 0x38	; 56
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e8 e3       	ldi	r30, 0x38	; 56
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_u8SetPinDirection+0x158>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	2a 95       	dec	r18
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_u8SetPinDirection+0x154>
     f7a:	84 2b       	or	r24, r20
     f7c:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     f7e:	a7 e3       	ldi	r26, 0x37	; 55
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e7 e3       	ldi	r30, 0x37	; 55
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_u8SetPinDirection+0x17e>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_u8SetPinDirection+0x17a>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	b9 c0       	rjmp	.+370    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     fa8:	a7 e3       	ldi	r26, 0x37	; 55
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e7 e3       	ldi	r30, 0x37	; 55
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_u8SetPinDirection+0x1a8>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_u8SetPinDirection+0x1a4>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	a5 c0       	rjmp	.+330    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     fd0:	19 82       	std	Y+1, r1	; 0x01
     fd2:	a3 c0       	rjmp	.+326    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection) {
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	38 87       	std	Y+8, r19	; 0x08
     fdc:	2f 83       	std	Y+7, r18	; 0x07
     fde:	8f 81       	ldd	r24, Y+7	; 0x07
     fe0:	98 85       	ldd	r25, Y+8	; 0x08
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	91 05       	cpc	r25, r1
     fe6:	89 f1       	breq	.+98     	; 0x104a <DIO_u8SetPinDirection+0x22c>
     fe8:	2f 81       	ldd	r18, Y+7	; 0x07
     fea:	38 85       	ldd	r19, Y+8	; 0x08
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	29 f0       	breq	.+10     	; 0xffc <DIO_u8SetPinDirection+0x1de>
     ff2:	8f 81       	ldd	r24, Y+7	; 0x07
     ff4:	98 85       	ldd	r25, Y+8	; 0x08
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	99 f0       	breq	.+38     	; 0x1020 <DIO_u8SetPinDirection+0x202>
     ffa:	3b c0       	rjmp	.+118    	; 0x1072 <DIO_u8SetPinDirection+0x254>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
     ffc:	a5 e3       	ldi	r26, 0x35	; 53
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e5 e3       	ldi	r30, 0x35	; 53
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_u8SetPinDirection+0x1fa>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	2a 95       	dec	r18
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_u8SetPinDirection+0x1f6>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1020:	a4 e3       	ldi	r26, 0x34	; 52
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e4 e3       	ldi	r30, 0x34	; 52
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_u8SetPinDirection+0x220>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_u8SetPinDirection+0x21c>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	68 c0       	rjmp	.+208    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    104a:	a4 e3       	ldi	r26, 0x34	; 52
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e4 e3       	ldi	r30, 0x34	; 52
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_u8SetPinDirection+0x24a>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_u8SetPinDirection+0x246>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	54 c0       	rjmp	.+168    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1072:	19 82       	std	Y+1, r1	; 0x01
    1074:	52 c0       	rjmp	.+164    	; 0x111a <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection) {
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3e 83       	std	Y+6, r19	; 0x06
    107e:	2d 83       	std	Y+5, r18	; 0x05
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	91 05       	cpc	r25, r1
    1088:	89 f1       	breq	.+98     	; 0x10ec <DIO_u8SetPinDirection+0x2ce>
    108a:	2d 81       	ldd	r18, Y+5	; 0x05
    108c:	3e 81       	ldd	r19, Y+6	; 0x06
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	29 f0       	breq	.+10     	; 0x109e <DIO_u8SetPinDirection+0x280>
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	99 f0       	breq	.+38     	; 0x10c2 <DIO_u8SetPinDirection+0x2a4>
    109c:	3b c0       	rjmp	.+118    	; 0x1114 <DIO_u8SetPinDirection+0x2f6>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    109e:	a2 e3       	ldi	r26, 0x32	; 50
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e2 e3       	ldi	r30, 0x32	; 50
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_u8SetPinDirection+0x29c>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	2a 95       	dec	r18
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_u8SetPinDirection+0x298>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    10c2:	a1 e3       	ldi	r26, 0x31	; 49
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e1 e3       	ldi	r30, 0x31	; 49
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_u8SetPinDirection+0x2c2>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_u8SetPinDirection+0x2be>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	17 c0       	rjmp	.+46     	; 0x111a <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    10ec:	a1 e3       	ldi	r26, 0x31	; 49
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e1 e3       	ldi	r30, 0x31	; 49
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_u8SetPinDirection+0x2ec>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_u8SetPinDirection+0x2e8>
    110e:	84 2b       	or	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	03 c0       	rjmp	.+6      	; 0x111a <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1114:	19 82       	std	Y+1, r1	; 0x01
    1116:	01 c0       	rjmp	.+2      	; 0x111a <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    1118:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
}
    111c:	2e 96       	adiw	r28, 0x0e	; 14
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue) {
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	2e 97       	sbiw	r28, 0x0e	; 14
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	8a 83       	std	Y+2, r24	; 0x02
    1144:	6b 83       	std	Y+3, r22	; 0x03
    1146:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7)
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	88 30       	cpi	r24, 0x08	; 8
    1150:	08 f0       	brcs	.+2      	; 0x1154 <DIO_u8SetPinValue+0x26>
    1152:	0a c1       	rjmp	.+532    	; 0x1368 <DIO_u8SetPinValue+0x23a>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	21 f0       	breq	.+8      	; 0x1162 <DIO_u8SetPinValue+0x34>
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	88 23       	and	r24, r24
    115e:	09 f0       	breq	.+2      	; 0x1162 <DIO_u8SetPinValue+0x34>
    1160:	03 c1       	rjmp	.+518    	; 0x1368 <DIO_u8SetPinValue+0x23a>
			&& ((Copy_u8PinValue == DIO_u8_HIGH)
					|| (Copy_u8PinValue == DIO_u8_LOW))) {
		switch (Copy_u8PortId) {
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3e 87       	std	Y+14, r19	; 0x0e
    116a:	2d 87       	std	Y+13, r18	; 0x0d
    116c:	8d 85       	ldd	r24, Y+13	; 0x0d
    116e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <DIO_u8SetPinValue+0x4a>
    1176:	4f c0       	rjmp	.+158    	; 0x1216 <DIO_u8SetPinValue+0xe8>
    1178:	2d 85       	ldd	r18, Y+13	; 0x0d
    117a:	3e 85       	ldd	r19, Y+14	; 0x0e
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	2c f4       	brge	.+10     	; 0x118c <DIO_u8SetPinValue+0x5e>
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	71 f0       	breq	.+28     	; 0x11a6 <DIO_u8SetPinValue+0x78>
    118a:	ec c0       	rjmp	.+472    	; 0x1364 <DIO_u8SetPinValue+0x236>
    118c:	2d 85       	ldd	r18, Y+13	; 0x0d
    118e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <DIO_u8SetPinValue+0x6a>
    1196:	77 c0       	rjmp	.+238    	; 0x1286 <DIO_u8SetPinValue+0x158>
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <DIO_u8SetPinValue+0x76>
    11a2:	a9 c0       	rjmp	.+338    	; 0x12f6 <DIO_u8SetPinValue+0x1c8>
    11a4:	df c0       	rjmp	.+446    	; 0x1364 <DIO_u8SetPinValue+0x236>
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue) {
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3c 87       	std	Y+12, r19	; 0x0c
    11ae:	2b 87       	std	Y+11, r18	; 0x0b
    11b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <DIO_u8SetPinValue+0xbe>
    11b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    11ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    11bc:	21 30       	cpi	r18, 0x01	; 1
    11be:	31 05       	cpc	r19, r1
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <DIO_u8SetPinValue+0x96>
    11c2:	d3 c0       	rjmp	.+422    	; 0x136a <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    11c4:	ab e3       	ldi	r26, 0x3B	; 59
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	eb e3       	ldi	r30, 0x3B	; 59
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_u8SetPinValue+0xb4>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_u8SetPinValue+0xb0>
    11e6:	84 2b       	or	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	bf c0       	rjmp	.+382    	; 0x136a <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    11ec:	ab e3       	ldi	r26, 0x3B	; 59
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	eb e3       	ldi	r30, 0x3B	; 59
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_u8SetPinValue+0xdc>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_u8SetPinValue+0xd8>
    120e:	80 95       	com	r24
    1210:	84 23       	and	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	aa c0       	rjmp	.+340    	; 0x136a <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinValue) {
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3a 87       	std	Y+10, r19	; 0x0a
    121e:	29 87       	std	Y+9, r18	; 0x09
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	d1 f0       	breq	.+52     	; 0x125c <DIO_u8SetPinValue+0x12e>
    1228:	29 85       	ldd	r18, Y+9	; 0x09
    122a:	3a 85       	ldd	r19, Y+10	; 0x0a
    122c:	21 30       	cpi	r18, 0x01	; 1
    122e:	31 05       	cpc	r19, r1
    1230:	09 f0       	breq	.+2      	; 0x1234 <DIO_u8SetPinValue+0x106>
    1232:	9b c0       	rjmp	.+310    	; 0x136a <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1234:	a8 e3       	ldi	r26, 0x38	; 56
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e8 e3       	ldi	r30, 0x38	; 56
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_u8SetPinValue+0x124>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_u8SetPinValue+0x120>
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	87 c0       	rjmp	.+270    	; 0x136a <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    125c:	a8 e3       	ldi	r26, 0x38	; 56
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e8 e3       	ldi	r30, 0x38	; 56
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_u8SetPinValue+0x14c>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_u8SetPinValue+0x148>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	72 c0       	rjmp	.+228    	; 0x136a <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinValue) {
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	38 87       	std	Y+8, r19	; 0x08
    128e:	2f 83       	std	Y+7, r18	; 0x07
    1290:	8f 81       	ldd	r24, Y+7	; 0x07
    1292:	98 85       	ldd	r25, Y+8	; 0x08
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	d1 f0       	breq	.+52     	; 0x12cc <DIO_u8SetPinValue+0x19e>
    1298:	2f 81       	ldd	r18, Y+7	; 0x07
    129a:	38 85       	ldd	r19, Y+8	; 0x08
    129c:	21 30       	cpi	r18, 0x01	; 1
    129e:	31 05       	cpc	r19, r1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <DIO_u8SetPinValue+0x176>
    12a2:	63 c0       	rjmp	.+198    	; 0x136a <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    12a4:	a5 e3       	ldi	r26, 0x35	; 53
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e3       	ldi	r30, 0x35	; 53
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8SetPinValue+0x194>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8SetPinValue+0x190>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	4f c0       	rjmp	.+158    	; 0x136a <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    12cc:	a5 e3       	ldi	r26, 0x35	; 53
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e5 e3       	ldi	r30, 0x35	; 53
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_u8SetPinValue+0x1bc>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_u8SetPinValue+0x1b8>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	3a c0       	rjmp	.+116    	; 0x136a <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinValue) {
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3e 83       	std	Y+6, r19	; 0x06
    12fe:	2d 83       	std	Y+5, r18	; 0x05
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	c9 f0       	breq	.+50     	; 0x133a <DIO_u8SetPinValue+0x20c>
    1308:	2d 81       	ldd	r18, Y+5	; 0x05
    130a:	3e 81       	ldd	r19, Y+6	; 0x06
    130c:	21 30       	cpi	r18, 0x01	; 1
    130e:	31 05       	cpc	r19, r1
    1310:	61 f5       	brne	.+88     	; 0x136a <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1312:	a2 e3       	ldi	r26, 0x32	; 50
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e2 e3       	ldi	r30, 0x32	; 50
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_u8SetPinValue+0x202>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_u8SetPinValue+0x1fe>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	18 c0       	rjmp	.+48     	; 0x136a <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_u8SetPinValue+0x22a>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_u8SetPinValue+0x226>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	03 c0       	rjmp	.+6      	; 0x136a <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    1364:	19 82       	std	Y+1, r1	; 0x01
    1366:	01 c0       	rjmp	.+2      	; 0x136a <DIO_u8SetPinValue+0x23c>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    1368:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
}
    136c:	2e 96       	adiw	r28, 0x0e	; 14
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue	(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 * Copy_pu8ReturnedValue)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	27 97       	sbiw	r28, 0x07	; 7
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	8a 83       	std	Y+2, r24	; 0x02
    1394:	6b 83       	std	Y+3, r22	; 0x03
    1396:	5d 83       	std	Y+5, r21	; 0x05
    1398:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    139a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_pu8ReturnedValue != NULL))
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	88 30       	cpi	r24, 0x08	; 8
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <DIO_u8GetPinValue+0x26>
    13a2:	79 c0       	rjmp	.+242    	; 0x1496 <DIO_u8GetPinValue+0x118>
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	09 f4       	brne	.+2      	; 0x13ae <DIO_u8GetPinValue+0x30>
    13ac:	74 c0       	rjmp	.+232    	; 0x1496 <DIO_u8GetPinValue+0x118>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortId)
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3f 83       	std	Y+7, r19	; 0x07
    13ba:	2e 83       	std	Y+6, r18	; 0x06
    13bc:	4e 81       	ldd	r20, Y+6	; 0x06
    13be:	5f 81       	ldd	r21, Y+7	; 0x07
    13c0:	41 30       	cpi	r20, 0x01	; 1
    13c2:	51 05       	cpc	r21, r1
    13c4:	59 f1       	breq	.+86     	; 0x141c <DIO_u8GetPinValue+0x9e>
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	91 05       	cpc	r25, r1
    13ce:	34 f4       	brge	.+12     	; 0x13dc <DIO_u8GetPinValue+0x5e>
    13d0:	2e 81       	ldd	r18, Y+6	; 0x06
    13d2:	3f 81       	ldd	r19, Y+7	; 0x07
    13d4:	21 15       	cp	r18, r1
    13d6:	31 05       	cpc	r19, r1
    13d8:	69 f0       	breq	.+26     	; 0x13f4 <DIO_u8GetPinValue+0x76>
    13da:	5c c0       	rjmp	.+184    	; 0x1494 <DIO_u8GetPinValue+0x116>
    13dc:	4e 81       	ldd	r20, Y+6	; 0x06
    13de:	5f 81       	ldd	r21, Y+7	; 0x07
    13e0:	42 30       	cpi	r20, 0x02	; 2
    13e2:	51 05       	cpc	r21, r1
    13e4:	79 f1       	breq	.+94     	; 0x1444 <DIO_u8GetPinValue+0xc6>
    13e6:	8e 81       	ldd	r24, Y+6	; 0x06
    13e8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <DIO_u8GetPinValue+0x74>
    13f0:	3d c0       	rjmp	.+122    	; 0x146c <DIO_u8GetPinValue+0xee>
    13f2:	50 c0       	rjmp	.+160    	; 0x1494 <DIO_u8GetPinValue+0x116>
		{
		case DIO_u8_PORTA:*Copy_pu8ReturnedValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);break;
    13f4:	e9 e3       	ldi	r30, 0x39	; 57
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a9 01       	movw	r20, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_u8GetPinValue+0x8e>
    1408:	55 95       	asr	r21
    140a:	47 95       	ror	r20
    140c:	8a 95       	dec	r24
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_u8GetPinValue+0x8a>
    1410:	ca 01       	movw	r24, r20
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	ec 81       	ldd	r30, Y+4	; 0x04
    1416:	fd 81       	ldd	r31, Y+5	; 0x05
    1418:	80 83       	st	Z, r24
    141a:	3d c0       	rjmp	.+122    	; 0x1496 <DIO_u8GetPinValue+0x118>
		case DIO_u8_PORTB:*Copy_pu8ReturnedValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);break;
    141c:	e6 e3       	ldi	r30, 0x36	; 54
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_u8GetPinValue+0xb6>
    1430:	55 95       	asr	r21
    1432:	47 95       	ror	r20
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_u8GetPinValue+0xb2>
    1438:	ca 01       	movw	r24, r20
    143a:	81 70       	andi	r24, 0x01	; 1
    143c:	ec 81       	ldd	r30, Y+4	; 0x04
    143e:	fd 81       	ldd	r31, Y+5	; 0x05
    1440:	80 83       	st	Z, r24
    1442:	29 c0       	rjmp	.+82     	; 0x1496 <DIO_u8GetPinValue+0x118>
		case DIO_u8_PORTC:*Copy_pu8ReturnedValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);break;
    1444:	e3 e3       	ldi	r30, 0x33	; 51
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a9 01       	movw	r20, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_u8GetPinValue+0xde>
    1458:	55 95       	asr	r21
    145a:	47 95       	ror	r20
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_u8GetPinValue+0xda>
    1460:	ca 01       	movw	r24, r20
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	ec 81       	ldd	r30, Y+4	; 0x04
    1466:	fd 81       	ldd	r31, Y+5	; 0x05
    1468:	80 83       	st	Z, r24
    146a:	15 c0       	rjmp	.+42     	; 0x1496 <DIO_u8GetPinValue+0x118>
		case DIO_u8_PORTD:*Copy_pu8ReturnedValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);break;
    146c:	e0 e3       	ldi	r30, 0x30	; 48
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a9 01       	movw	r20, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_u8GetPinValue+0x106>
    1480:	55 95       	asr	r21
    1482:	47 95       	ror	r20
    1484:	8a 95       	dec	r24
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_u8GetPinValue+0x102>
    1488:	ca 01       	movw	r24, r20
    148a:	81 70       	andi	r24, 0x01	; 1
    148c:	ec 81       	ldd	r30, Y+4	; 0x04
    148e:	fd 81       	ldd	r31, Y+5	; 0x05
    1490:	80 83       	st	Z, r24
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <DIO_u8GetPinValue+0x118>
		default 	:Local_u8ErrorState = STD_TYPES_NOK;
    1494:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    1496:	89 81       	ldd	r24, Y+1	; 0x01

}
    1498:	27 96       	adiw	r28, 0x07	; 7
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <DIO_u8TogPinValue>:

u8 DIO_u8TogPinValue	(u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <DIO_u8TogPinValue+0x6>
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <DIO_u8TogPinValue+0x8>
    14b2:	0f 92       	push	r0
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <DIO_u8TogPinValue+0x1e>
    14c6:	6f c0       	rjmp	.+222    	; 0x15a6 <DIO_u8TogPinValue+0xfc>
	{
		switch(Copy_u8PortId)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3d 83       	std	Y+5, r19	; 0x05
    14d0:	2c 83       	std	Y+4, r18	; 0x04
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	9d 81       	ldd	r25, Y+5	; 0x05
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	91 05       	cpc	r25, r1
    14da:	49 f1       	breq	.+82     	; 0x152e <DIO_u8TogPinValue+0x84>
    14dc:	2c 81       	ldd	r18, Y+4	; 0x04
    14de:	3d 81       	ldd	r19, Y+5	; 0x05
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <DIO_u8TogPinValue+0x46>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	61 f0       	breq	.+24     	; 0x1506 <DIO_u8TogPinValue+0x5c>
    14ee:	5c c0       	rjmp	.+184    	; 0x15a8 <DIO_u8TogPinValue+0xfe>
    14f0:	2c 81       	ldd	r18, Y+4	; 0x04
    14f2:	3d 81       	ldd	r19, Y+5	; 0x05
    14f4:	22 30       	cpi	r18, 0x02	; 2
    14f6:	31 05       	cpc	r19, r1
    14f8:	71 f1       	breq	.+92     	; 0x1556 <DIO_u8TogPinValue+0xac>
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	83 30       	cpi	r24, 0x03	; 3
    1500:	91 05       	cpc	r25, r1
    1502:	e9 f1       	breq	.+122    	; 0x157e <DIO_u8TogPinValue+0xd4>
    1504:	51 c0       	rjmp	.+162    	; 0x15a8 <DIO_u8TogPinValue+0xfe>
		{
		case DIO_u8_PORTA:TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1506:	ab e3       	ldi	r26, 0x3B	; 59
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	eb e3       	ldi	r30, 0x3B	; 59
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_u8TogPinValue+0x7a>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_u8TogPinValue+0x76>
    1528:	84 27       	eor	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	3d c0       	rjmp	.+122    	; 0x15a8 <DIO_u8TogPinValue+0xfe>
		case DIO_u8_PORTB:TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    152e:	a8 e3       	ldi	r26, 0x38	; 56
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e8 e3       	ldi	r30, 0x38	; 56
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_u8TogPinValue+0xa2>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_u8TogPinValue+0x9e>
    1550:	84 27       	eor	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	29 c0       	rjmp	.+82     	; 0x15a8 <DIO_u8TogPinValue+0xfe>
		case DIO_u8_PORTC:TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1556:	a5 e3       	ldi	r26, 0x35	; 53
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e5 e3       	ldi	r30, 0x35	; 53
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_u8TogPinValue+0xca>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_u8TogPinValue+0xc6>
    1578:	84 27       	eor	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	15 c0       	rjmp	.+42     	; 0x15a8 <DIO_u8TogPinValue+0xfe>
		case DIO_u8_PORTD:TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    157e:	a2 e3       	ldi	r26, 0x32	; 50
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e2 e3       	ldi	r30, 0x32	; 50
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_u8TogPinValue+0xf2>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_u8TogPinValue+0xee>
    15a0:	84 27       	eor	r24, r20
    15a2:	8c 93       	st	X, r24
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <DIO_u8TogPinValue+0xfe>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    15a6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <DIO_u8SetPortDirection>:


u8 DIO_u8SetPortDirection(u8 Copy_u8PortId,u8 Copy_u8PortDirection)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	2d 97       	sbiw	r28, 0x0d	; 13
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	8a 83       	std	Y+2, r24	; 0x02
    15d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3d 87       	std	Y+13, r19	; 0x0d
    15de:	2c 87       	std	Y+12, r18	; 0x0c
    15e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	d1 f1       	breq	.+116    	; 0x165e <DIO_u8SetPortDirection+0xa4>
    15ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	2c f4       	brge	.+10     	; 0x15fe <DIO_u8SetPortDirection+0x44>
    15f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	71 f0       	breq	.+28     	; 0x1618 <DIO_u8SetPortDirection+0x5e>
    15fc:	99 c0       	rjmp	.+306    	; 0x1730 <DIO_u8SetPortDirection+0x176>
    15fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1600:	3d 85       	ldd	r19, Y+13	; 0x0d
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	09 f4       	brne	.+2      	; 0x160a <DIO_u8SetPortDirection+0x50>
    1608:	4d c0       	rjmp	.+154    	; 0x16a4 <DIO_u8SetPortDirection+0xea>
    160a:	8c 85       	ldd	r24, Y+12	; 0x0c
    160c:	9d 85       	ldd	r25, Y+13	; 0x0d
    160e:	83 30       	cpi	r24, 0x03	; 3
    1610:	91 05       	cpc	r25, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <DIO_u8SetPortDirection+0x5c>
    1614:	6a c0       	rjmp	.+212    	; 0x16ea <DIO_u8SetPortDirection+0x130>
    1616:	8c c0       	rjmp	.+280    	; 0x1730 <DIO_u8SetPortDirection+0x176>
	{
	case DIO_u8_PORTA:
		switch(Copy_u8PortDirection)
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	3b 87       	std	Y+11, r19	; 0x0b
    1620:	2a 87       	std	Y+10, r18	; 0x0a
    1622:	8a 85       	ldd	r24, Y+10	; 0x0a
    1624:	9b 85       	ldd	r25, Y+11	; 0x0b
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	91 05       	cpc	r25, r1
    162a:	91 f0       	breq	.+36     	; 0x1650 <DIO_u8SetPortDirection+0x96>
    162c:	2a 85       	ldd	r18, Y+10	; 0x0a
    162e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	29 f0       	breq	.+10     	; 0x1640 <DIO_u8SetPortDirection+0x86>
    1636:	8a 85       	ldd	r24, Y+10	; 0x0a
    1638:	9b 85       	ldd	r25, Y+11	; 0x0b
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	29 f0       	breq	.+10     	; 0x1648 <DIO_u8SetPortDirection+0x8e>
    163e:	0d c0       	rjmp	.+26     	; 0x165a <DIO_u8SetPortDirection+0xa0>
		{
		case DIO_u8_INPUT_PULLED_UP:DIO_u8_PORTA_REG = 0xff;
    1640:	eb e3       	ldi	r30, 0x3B	; 59
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING :DIO_u8_DDRA_REG  = 0x00;break;
    1648:	ea e3       	ldi	r30, 0x3A	; 58
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	10 82       	st	Z, r1
    164e:	71 c0       	rjmp	.+226    	; 0x1732 <DIO_u8SetPortDirection+0x178>
		case DIO_u8_OUTPUT		   :DIO_u8_DDRA_REG  = 0xff;break;
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	80 83       	st	Z, r24
    1658:	6c c0       	rjmp	.+216    	; 0x1732 <DIO_u8SetPortDirection+0x178>
		default					   :Local_u8ErrorState = STD_TYPES_NOK;
    165a:	19 82       	std	Y+1, r1	; 0x01
    165c:	6a c0       	rjmp	.+212    	; 0x1732 <DIO_u8SetPortDirection+0x178>

		}
		break;
		case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	39 87       	std	Y+9, r19	; 0x09
    1666:	28 87       	std	Y+8, r18	; 0x08
    1668:	88 85       	ldd	r24, Y+8	; 0x08
    166a:	99 85       	ldd	r25, Y+9	; 0x09
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	91 05       	cpc	r25, r1
    1670:	91 f0       	breq	.+36     	; 0x1696 <DIO_u8SetPortDirection+0xdc>
    1672:	28 85       	ldd	r18, Y+8	; 0x08
    1674:	39 85       	ldd	r19, Y+9	; 0x09
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	29 f0       	breq	.+10     	; 0x1686 <DIO_u8SetPortDirection+0xcc>
    167c:	88 85       	ldd	r24, Y+8	; 0x08
    167e:	99 85       	ldd	r25, Y+9	; 0x09
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	29 f0       	breq	.+10     	; 0x168e <DIO_u8SetPortDirection+0xd4>
    1684:	0d c0       	rjmp	.+26     	; 0x16a0 <DIO_u8SetPortDirection+0xe6>
			{
			case DIO_u8_INPUT_PULLED_UP:DIO_u8_PORTB_REG = 0xff;
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	80 83       	st	Z, r24
			case DIO_u8_INPUT_FLOATING :DIO_u8_DDRB_REG  = 0x00;break;
    168e:	e7 e3       	ldi	r30, 0x37	; 55
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	10 82       	st	Z, r1
    1694:	4e c0       	rjmp	.+156    	; 0x1732 <DIO_u8SetPortDirection+0x178>
			case DIO_u8_OUTPUT		   :DIO_u8_DDRB_REG  = 0xff;break;
    1696:	e7 e3       	ldi	r30, 0x37	; 55
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	80 83       	st	Z, r24
    169e:	49 c0       	rjmp	.+146    	; 0x1732 <DIO_u8SetPortDirection+0x178>
			default					   :Local_u8ErrorState = STD_TYPES_NOK;
    16a0:	19 82       	std	Y+1, r1	; 0x01
    16a2:	47 c0       	rjmp	.+142    	; 0x1732 <DIO_u8SetPortDirection+0x178>

			}
			break;
		case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	3f 83       	std	Y+7, r19	; 0x07
    16ac:	2e 83       	std	Y+6, r18	; 0x06
    16ae:	8e 81       	ldd	r24, Y+6	; 0x06
    16b0:	9f 81       	ldd	r25, Y+7	; 0x07
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	91 05       	cpc	r25, r1
    16b6:	91 f0       	breq	.+36     	; 0x16dc <DIO_u8SetPortDirection+0x122>
    16b8:	2e 81       	ldd	r18, Y+6	; 0x06
    16ba:	3f 81       	ldd	r19, Y+7	; 0x07
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	29 f0       	breq	.+10     	; 0x16cc <DIO_u8SetPortDirection+0x112>
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <DIO_u8SetPortDirection+0x11a>
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <DIO_u8SetPortDirection+0x12c>
			{
			case DIO_u8_INPUT_PULLED_UP:DIO_u8_PORTC_REG = 0xff;
    16cc:	e5 e3       	ldi	r30, 0x35	; 53
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	80 83       	st	Z, r24
			case DIO_u8_INPUT_FLOATING :DIO_u8_DDRC_REG  = 0x00;break;
    16d4:	e4 e3       	ldi	r30, 0x34	; 52
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	10 82       	st	Z, r1
    16da:	2b c0       	rjmp	.+86     	; 0x1732 <DIO_u8SetPortDirection+0x178>
			case DIO_u8_OUTPUT		   :DIO_u8_DDRC_REG  = 0xff;break;
    16dc:	e4 e3       	ldi	r30, 0x34	; 52
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	80 83       	st	Z, r24
    16e4:	26 c0       	rjmp	.+76     	; 0x1732 <DIO_u8SetPortDirection+0x178>
			default					   :Local_u8ErrorState = STD_TYPES_NOK;
    16e6:	19 82       	std	Y+1, r1	; 0x01
    16e8:	24 c0       	rjmp	.+72     	; 0x1732 <DIO_u8SetPortDirection+0x178>

			}
			break;
		case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	3d 83       	std	Y+5, r19	; 0x05
    16f2:	2c 83       	std	Y+4, r18	; 0x04
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	91 05       	cpc	r25, r1
    16fc:	91 f0       	breq	.+36     	; 0x1722 <DIO_u8SetPortDirection+0x168>
    16fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1700:	3d 81       	ldd	r19, Y+5	; 0x05
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	29 f0       	breq	.+10     	; 0x1712 <DIO_u8SetPortDirection+0x158>
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	9d 81       	ldd	r25, Y+5	; 0x05
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	29 f0       	breq	.+10     	; 0x171a <DIO_u8SetPortDirection+0x160>
    1710:	0d c0       	rjmp	.+26     	; 0x172c <DIO_u8SetPortDirection+0x172>
			{
			case DIO_u8_INPUT_PULLED_UP:DIO_u8_PORTD_REG = 0xff;
    1712:	e2 e3       	ldi	r30, 0x32	; 50
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	8f ef       	ldi	r24, 0xFF	; 255
    1718:	80 83       	st	Z, r24
			case DIO_u8_INPUT_FLOATING :DIO_u8_DDRD_REG  = 0x00;break;
    171a:	e1 e3       	ldi	r30, 0x31	; 49
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	10 82       	st	Z, r1
    1720:	08 c0       	rjmp	.+16     	; 0x1732 <DIO_u8SetPortDirection+0x178>
			case DIO_u8_OUTPUT		   :DIO_u8_DDRD_REG  = 0xff;break;
    1722:	e1 e3       	ldi	r30, 0x31	; 49
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	80 83       	st	Z, r24
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <DIO_u8SetPortDirection+0x178>
			default					   :Local_u8ErrorState = STD_TYPES_NOK;
    172c:	19 82       	std	Y+1, r1	; 0x01
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <DIO_u8SetPortDirection+0x178>

			}
			break;
			default : Local_u8ErrorState = STD_TYPES_NOK;
    1730:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1732:	89 81       	ldd	r24, Y+1	; 0x01
}
    1734:	2d 96       	adiw	r28, 0x0d	; 13
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue	 (u8 Copy_u8PortId,u8 Copy_u8PortValue)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <DIO_u8SetPortValue+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <DIO_u8SetPortValue+0x8>
    174e:	0f 92       	push	r0
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	8a 83       	std	Y+2, r24	; 0x02
    1756:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	3d 83       	std	Y+5, r19	; 0x05
    1764:	2c 83       	std	Y+4, r18	; 0x04
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	91 05       	cpc	r25, r1
    176e:	d1 f0       	breq	.+52     	; 0x17a4 <DIO_u8SetPortValue+0x5e>
    1770:	2c 81       	ldd	r18, Y+4	; 0x04
    1772:	3d 81       	ldd	r19, Y+5	; 0x05
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	2c f4       	brge	.+10     	; 0x1784 <DIO_u8SetPortValue+0x3e>
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	9d 81       	ldd	r25, Y+5	; 0x05
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	61 f0       	breq	.+24     	; 0x179a <DIO_u8SetPortValue+0x54>
    1782:	1f c0       	rjmp	.+62     	; 0x17c2 <DIO_u8SetPortValue+0x7c>
    1784:	2c 81       	ldd	r18, Y+4	; 0x04
    1786:	3d 81       	ldd	r19, Y+5	; 0x05
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	81 f0       	breq	.+32     	; 0x17ae <DIO_u8SetPortValue+0x68>
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	91 05       	cpc	r25, r1
    1796:	81 f0       	breq	.+32     	; 0x17b8 <DIO_u8SetPortValue+0x72>
    1798:	14 c0       	rjmp	.+40     	; 0x17c2 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    179a:	eb e3       	ldi	r30, 0x3B	; 59
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	80 83       	st	Z, r24
    17a2:	10 c0       	rjmp	.+32     	; 0x17c4 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    17a4:	e8 e3       	ldi	r30, 0x38	; 56
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	80 83       	st	Z, r24
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    17ae:	e5 e3       	ldi	r30, 0x35	; 53
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	80 83       	st	Z, r24
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    17b8:	e2 e3       	ldi	r30, 0x32	; 50
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	80 83       	st	Z, r24
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <DIO_u8SetPortValue+0x7e>
	default 	:Local_u8ErrorState = STD_TYPES_NOK;
    17c2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue	 (u8 Copy_u8PortId,u8 * Copy_pu8PortValue)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <DIO_u8GetPortValue+0x6>
    17dc:	00 d0       	rcall	.+0      	; 0x17de <DIO_u8GetPortValue+0x8>
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <DIO_u8GetPortValue+0xa>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	8a 83       	std	Y+2, r24	; 0x02
    17e6:	7c 83       	std	Y+4, r23	; 0x04
    17e8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8PortValue != NULL)
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	e1 f1       	breq	.+120    	; 0x186e <DIO_u8GetPortValue+0x98>
	{
		switch(Copy_u8PortId)
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	3e 83       	std	Y+6, r19	; 0x06
    17fe:	2d 83       	std	Y+5, r18	; 0x05
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	91 05       	cpc	r25, r1
    1808:	e1 f0       	breq	.+56     	; 0x1842 <DIO_u8GetPortValue+0x6c>
    180a:	2d 81       	ldd	r18, Y+5	; 0x05
    180c:	3e 81       	ldd	r19, Y+6	; 0x06
    180e:	22 30       	cpi	r18, 0x02	; 2
    1810:	31 05       	cpc	r19, r1
    1812:	2c f4       	brge	.+10     	; 0x181e <DIO_u8GetPortValue+0x48>
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	61 f0       	breq	.+24     	; 0x1834 <DIO_u8GetPortValue+0x5e>
    181c:	27 c0       	rjmp	.+78     	; 0x186c <DIO_u8GetPortValue+0x96>
    181e:	2d 81       	ldd	r18, Y+5	; 0x05
    1820:	3e 81       	ldd	r19, Y+6	; 0x06
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	a1 f0       	breq	.+40     	; 0x1850 <DIO_u8GetPortValue+0x7a>
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	91 05       	cpc	r25, r1
    1830:	b1 f0       	breq	.+44     	; 0x185e <DIO_u8GetPortValue+0x88>
    1832:	1c c0       	rjmp	.+56     	; 0x186c <DIO_u8GetPortValue+0x96>
		{
		case DIO_u8_PORTA:*Copy_pu8PortValue = DIO_u8_PINA_REG;break;
    1834:	e9 e3       	ldi	r30, 0x39	; 57
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	eb 81       	ldd	r30, Y+3	; 0x03
    183c:	fc 81       	ldd	r31, Y+4	; 0x04
    183e:	80 83       	st	Z, r24
    1840:	16 c0       	rjmp	.+44     	; 0x186e <DIO_u8GetPortValue+0x98>
		case DIO_u8_PORTB:*Copy_pu8PortValue = DIO_u8_PINB_REG;break;
    1842:	e6 e3       	ldi	r30, 0x36	; 54
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	eb 81       	ldd	r30, Y+3	; 0x03
    184a:	fc 81       	ldd	r31, Y+4	; 0x04
    184c:	80 83       	st	Z, r24
    184e:	0f c0       	rjmp	.+30     	; 0x186e <DIO_u8GetPortValue+0x98>
		case DIO_u8_PORTC:*Copy_pu8PortValue = DIO_u8_PINC_REG;break;
    1850:	e3 e3       	ldi	r30, 0x33	; 51
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	eb 81       	ldd	r30, Y+3	; 0x03
    1858:	fc 81       	ldd	r31, Y+4	; 0x04
    185a:	80 83       	st	Z, r24
    185c:	08 c0       	rjmp	.+16     	; 0x186e <DIO_u8GetPortValue+0x98>
		case DIO_u8_PORTD:*Copy_pu8PortValue = DIO_u8_PIND_REG;break;
    185e:	e0 e3       	ldi	r30, 0x30	; 48
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	eb 81       	ldd	r30, Y+3	; 0x03
    1866:	fc 81       	ldd	r31, Y+4	; 0x04
    1868:	80 83       	st	Z, r24
    186a:	01 c0       	rjmp	.+2      	; 0x186e <DIO_u8GetPortValue+0x98>
		default			 :Local_u8ErrorState = STD_TYPES_NOK;
    186c:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    186e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1870:	26 96       	adiw	r28, 0x06	; 6
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <DIO_u8Init>:

void DIO_u8Init         (void)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
	/*Direction DDR*/
DIO_u8_DDRA_REG = PRIVATE_u8_CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
    188a:	ea e3       	ldi	r30, 0x3A	; 58
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	10 82       	st	Z, r1
		                          DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);

DIO_u8_DDRB_REG = PRIVATE_u8_CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION,
    1890:	e7 e3       	ldi	r30, 0x37	; 55
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	10 82       	st	Z, r1
		                          DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);

DIO_u8_DDRC_REG = PRIVATE_u8_CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION,
    1896:	e4 e3       	ldi	r30, 0x34	; 52
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	87 e0       	ldi	r24, 0x07	; 7
    189c:	80 83       	st	Z, r24
		                          DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);

DIO_u8_DDRD_REG = PRIVATE_u8_CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION,
    189e:	e1 e3       	ldi	r30, 0x31	; 49
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	80 83       	st	Z, r24
		                          DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);

/*Value PORT*/

DIO_u8_PORTA_REG = PRIVATE_u8_CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE,
    18a6:	eb e3       	ldi	r30, 0x3B	; 59
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	10 82       	st	Z, r1
	                               DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);

DIO_u8_PORTB_REG = PRIVATE_u8_CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE,
    18ac:	e8 e3       	ldi	r30, 0x38	; 56
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	10 82       	st	Z, r1
								   DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);

DIO_u8_PORTC_REG = PRIVATE_u8_CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE,
    18b2:	e5 e3       	ldi	r30, 0x35	; 53
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	88 ef       	ldi	r24, 0xF8	; 248
    18b8:	80 83       	st	Z, r24
	                                DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);

DIO_u8_PORTD_REG = PRIVATE_u8_CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE,
    18ba:	e2 e3       	ldi	r30, 0x32	; 50
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	10 82       	st	Z, r1
		                          DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);



}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	cc 54       	subi	r28, 0x4C	; 76
    18d4:	d0 40       	sbci	r29, 0x00	; 0
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	fe 01       	movw	r30, r28
    18e2:	e7 5b       	subi	r30, 0xB7	; 183
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	ac e0       	ldi	r26, 0x0C	; 12
    18ec:	b2 e4       	ldi	r27, 0x42	; 66
    18ee:	80 83       	st	Z, r24
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	a2 83       	std	Z+2, r26	; 0x02
    18f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f6:	8e 01       	movw	r16, r28
    18f8:	0b 5b       	subi	r16, 0xBB	; 187
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	fe 01       	movw	r30, r28
    18fe:	e7 5b       	subi	r30, 0xB7	; 183
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a ef       	ldi	r20, 0xFA	; 250
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	f8 01       	movw	r30, r16
    191c:	80 83       	st	Z, r24
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	a2 83       	std	Z+2, r26	; 0x02
    1922:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1924:	fe 01       	movw	r30, r28
    1926:	eb 5b       	subi	r30, 0xBB	; 187
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	5f e3       	ldi	r21, 0x3F	; 63
    193a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    193e:	88 23       	and	r24, r24
    1940:	44 f4       	brge	.+16     	; 0x1952 <LCD_voidInit+0x8c>
		__ticks = 1;
    1942:	fe 01       	movw	r30, r28
    1944:	ed 5b       	subi	r30, 0xBD	; 189
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
    1950:	64 c0       	rjmp	.+200    	; 0x1a1a <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1952:	fe 01       	movw	r30, r28
    1954:	eb 5b       	subi	r30, 0xBB	; 187
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	60 81       	ld	r22, Z
    195a:	71 81       	ldd	r23, Z+1	; 0x01
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	4f e7       	ldi	r20, 0x7F	; 127
    1966:	57 e4       	ldi	r21, 0x47	; 71
    1968:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    196c:	18 16       	cp	r1, r24
    196e:	0c f0       	brlt	.+2      	; 0x1972 <LCD_voidInit+0xac>
    1970:	43 c0       	rjmp	.+134    	; 0x19f8 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	fe 01       	movw	r30, r28
    1974:	e7 5b       	subi	r30, 0xB7	; 183
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e2       	ldi	r20, 0x20	; 32
    1986:	51 e4       	ldi	r21, 0x41	; 65
    1988:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8e 01       	movw	r16, r28
    1992:	0d 5b       	subi	r16, 0xBD	; 189
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	f8 01       	movw	r30, r16
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
    19a8:	1f c0       	rjmp	.+62     	; 0x19e8 <LCD_voidInit+0x122>
    19aa:	fe 01       	movw	r30, r28
    19ac:	ef 5b       	subi	r30, 0xBF	; 191
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	88 ec       	ldi	r24, 0xC8	; 200
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19b8:	fe 01       	movw	r30, r28
    19ba:	ef 5b       	subi	r30, 0xBF	; 191
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_voidInit+0xfc>
    19c6:	fe 01       	movw	r30, r28
    19c8:	ef 5b       	subi	r30, 0xBF	; 191
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d0:	de 01       	movw	r26, r28
    19d2:	ad 5b       	subi	r26, 0xBD	; 189
    19d4:	bf 4f       	sbci	r27, 0xFF	; 255
    19d6:	fe 01       	movw	r30, r28
    19d8:	ed 5b       	subi	r30, 0xBD	; 189
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	11 96       	adiw	r26, 0x01	; 1
    19e4:	9c 93       	st	X, r25
    19e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e8:	fe 01       	movw	r30, r28
    19ea:	ed 5b       	subi	r30, 0xBD	; 189
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	d1 f6       	brne	.-76     	; 0x19aa <LCD_voidInit+0xe4>
    19f6:	24 c0       	rjmp	.+72     	; 0x1a40 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	8e 01       	movw	r16, r28
    19fa:	0d 5b       	subi	r16, 0xBD	; 189
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
    19fe:	fe 01       	movw	r30, r28
    1a00:	eb 5b       	subi	r30, 0xBB	; 187
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	f8 01       	movw	r30, r16
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	ed 5b       	subi	r30, 0xBD	; 189
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	fe 01       	movw	r30, r28
    1a26:	ff 96       	adiw	r30, 0x3f	; 63
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	80 83       	st	Z, r24
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ff 96       	adiw	r30, 0x3f	; 63
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_voidInit+0x16e>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	ff 96       	adiw	r30, 0x3f	; 63
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
	_delay_ms(35);
	LCD_voidWriteCmnd(0b00111000);
    1a40:	88 e3       	ldi	r24, 0x38	; 56
    1a42:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_voidWriteCmnd>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	a0 e2       	ldi	r26, 0x20	; 32
    1a4c:	b2 e4       	ldi	r27, 0x42	; 66
    1a4e:	8b af       	std	Y+59, r24	; 0x3b
    1a50:	9c af       	std	Y+60, r25	; 0x3c
    1a52:	ad af       	std	Y+61, r26	; 0x3d
    1a54:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a56:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a58:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5e:	2b ea       	ldi	r18, 0xAB	; 171
    1a60:	3a ea       	ldi	r19, 0xAA	; 170
    1a62:	4a e2       	ldi	r20, 0x2A	; 42
    1a64:	50 e4       	ldi	r21, 0x40	; 64
    1a66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8f ab       	std	Y+55, r24	; 0x37
    1a70:	98 af       	std	Y+56, r25	; 0x38
    1a72:	a9 af       	std	Y+57, r26	; 0x39
    1a74:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a76:	6f a9       	ldd	r22, Y+55	; 0x37
    1a78:	78 ad       	ldd	r23, Y+56	; 0x38
    1a7a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e8       	ldi	r20, 0x80	; 128
    1a84:	5f e3       	ldi	r21, 0x3F	; 63
    1a86:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a8a:	88 23       	and	r24, r24
    1a8c:	1c f4       	brge	.+6      	; 0x1a94 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	8e ab       	std	Y+54, r24	; 0x36
    1a92:	91 c0       	rjmp	.+290    	; 0x1bb6 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1a94:	6f a9       	ldd	r22, Y+55	; 0x37
    1a96:	78 ad       	ldd	r23, Y+56	; 0x38
    1a98:	89 ad       	ldd	r24, Y+57	; 0x39
    1a9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	53 e4       	ldi	r21, 0x43	; 67
    1aa4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	0c f0       	brlt	.+2      	; 0x1aae <LCD_voidInit+0x1e8>
    1aac:	7b c0       	rjmp	.+246    	; 0x1ba4 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1aae:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ab0:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ab2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ab4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	54 e4       	ldi	r21, 0x44	; 68
    1abe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8a ab       	std	Y+50, r24	; 0x32
    1ac8:	9b ab       	std	Y+51, r25	; 0x33
    1aca:	ac ab       	std	Y+52, r26	; 0x34
    1acc:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ace:	6a a9       	ldd	r22, Y+50	; 0x32
    1ad0:	7b a9       	ldd	r23, Y+51	; 0x33
    1ad2:	8c a9       	ldd	r24, Y+52	; 0x34
    1ad4:	9d a9       	ldd	r25, Y+53	; 0x35
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	4a ef       	ldi	r20, 0xFA	; 250
    1adc:	54 e4       	ldi	r21, 0x44	; 68
    1ade:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8e a7       	std	Y+46, r24	; 0x2e
    1ae8:	9f a7       	std	Y+47, r25	; 0x2f
    1aea:	a8 ab       	std	Y+48, r26	; 0x30
    1aec:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1aee:	6e a5       	ldd	r22, Y+46	; 0x2e
    1af0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1af2:	88 a9       	ldd	r24, Y+48	; 0x30
    1af4:	99 a9       	ldd	r25, Y+49	; 0x31
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e8       	ldi	r20, 0x80	; 128
    1afc:	5f e3       	ldi	r21, 0x3F	; 63
    1afe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b02:	88 23       	and	r24, r24
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <LCD_voidInit+0x24a>
		__ticks = 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9d a7       	std	Y+45, r25	; 0x2d
    1b0c:	8c a7       	std	Y+44, r24	; 0x2c
    1b0e:	3f c0       	rjmp	.+126    	; 0x1b8e <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1b10:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b12:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b14:	88 a9       	ldd	r24, Y+48	; 0x30
    1b16:	99 a9       	ldd	r25, Y+49	; 0x31
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	4c f5       	brge	.+82     	; 0x1b7a <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b28:	6a a9       	ldd	r22, Y+50	; 0x32
    1b2a:	7b a9       	ldd	r23, Y+51	; 0x33
    1b2c:	8c a9       	ldd	r24, Y+52	; 0x34
    1b2e:	9d a9       	ldd	r25, Y+53	; 0x35
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9d a7       	std	Y+45, r25	; 0x2d
    1b4e:	8c a7       	std	Y+44, r24	; 0x2c
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <LCD_voidInit+0x2aa>
    1b52:	88 ec       	ldi	r24, 0xC8	; 200
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9b a7       	std	Y+43, r25	; 0x2b
    1b58:	8a a7       	std	Y+42, r24	; 0x2a
    1b5a:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b5c:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <LCD_voidInit+0x298>
    1b62:	9b a7       	std	Y+43, r25	; 0x2b
    1b64:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b68:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	9d a7       	std	Y+45, r25	; 0x2d
    1b6e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b70:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b72:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	69 f7       	brne	.-38     	; 0x1b52 <LCD_voidInit+0x28c>
    1b78:	24 c0       	rjmp	.+72     	; 0x1bc2 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b7c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b7e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b80:	99 a9       	ldd	r25, Y+49	; 0x31
    1b82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9d a7       	std	Y+45, r25	; 0x2d
    1b8c:	8c a7       	std	Y+44, r24	; 0x2c
    1b8e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b90:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b92:	99 a7       	std	Y+41, r25	; 0x29
    1b94:	88 a7       	std	Y+40, r24	; 0x28
    1b96:	88 a5       	ldd	r24, Y+40	; 0x28
    1b98:	99 a5       	ldd	r25, Y+41	; 0x29
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <LCD_voidInit+0x2d4>
    1b9e:	99 a7       	std	Y+41, r25	; 0x29
    1ba0:	88 a7       	std	Y+40, r24	; 0x28
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ba4:	6f a9       	ldd	r22, Y+55	; 0x37
    1ba6:	78 ad       	ldd	r23, Y+56	; 0x38
    1ba8:	89 ad       	ldd	r24, Y+57	; 0x39
    1baa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8e ab       	std	Y+54, r24	; 0x36
    1bb6:	8e a9       	ldd	r24, Y+54	; 0x36
    1bb8:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bba:	8f a1       	ldd	r24, Y+39	; 0x27
    1bbc:	8a 95       	dec	r24
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_voidInit+0x2f6>
    1bc0:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidWriteCmnd(0b00001111);
    1bc2:	8f e0       	ldi	r24, 0x0F	; 15
    1bc4:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_voidWriteCmnd>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a0 e2       	ldi	r26, 0x20	; 32
    1bce:	b2 e4       	ldi	r27, 0x42	; 66
    1bd0:	8b a3       	std	Y+35, r24	; 0x23
    1bd2:	9c a3       	std	Y+36, r25	; 0x24
    1bd4:	ad a3       	std	Y+37, r26	; 0x25
    1bd6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bda:	7c a1       	ldd	r23, Y+36	; 0x24
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	9e a1       	ldd	r25, Y+38	; 0x26
    1be0:	2b ea       	ldi	r18, 0xAB	; 171
    1be2:	3a ea       	ldi	r19, 0xAA	; 170
    1be4:	4a e2       	ldi	r20, 0x2A	; 42
    1be6:	50 e4       	ldi	r21, 0x40	; 64
    1be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	8f 8f       	std	Y+31, r24	; 0x1f
    1bf2:	98 a3       	std	Y+32, r25	; 0x20
    1bf4:	a9 a3       	std	Y+33, r26	; 0x21
    1bf6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bf8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bfa:	78 a1       	ldd	r23, Y+32	; 0x20
    1bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	1c f4       	brge	.+6      	; 0x1c16 <LCD_voidInit+0x350>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	8e 8f       	std	Y+30, r24	; 0x1e
    1c14:	91 c0       	rjmp	.+290    	; 0x1d38 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1c16:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c18:	78 a1       	ldd	r23, Y+32	; 0x20
    1c1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	4f e7       	ldi	r20, 0x7F	; 127
    1c24:	53 e4       	ldi	r21, 0x43	; 67
    1c26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c2a:	18 16       	cp	r1, r24
    1c2c:	0c f0       	brlt	.+2      	; 0x1c30 <LCD_voidInit+0x36a>
    1c2e:	7b c0       	rjmp	.+246    	; 0x1d26 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1c30:	6b a1       	ldd	r22, Y+35	; 0x23
    1c32:	7c a1       	ldd	r23, Y+36	; 0x24
    1c34:	8d a1       	ldd	r24, Y+37	; 0x25
    1c36:	9e a1       	ldd	r25, Y+38	; 0x26
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a e7       	ldi	r20, 0x7A	; 122
    1c3e:	54 e4       	ldi	r21, 0x44	; 68
    1c40:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8a 8f       	std	Y+26, r24	; 0x1a
    1c4a:	9b 8f       	std	Y+27, r25	; 0x1b
    1c4c:	ac 8f       	std	Y+28, r26	; 0x1c
    1c4e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c50:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c52:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a ef       	ldi	r20, 0xFA	; 250
    1c5e:	54 e4       	ldi	r21, 0x44	; 68
    1c60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8e 8b       	std	Y+22, r24	; 0x16
    1c6a:	9f 8b       	std	Y+23, r25	; 0x17
    1c6c:	a8 8f       	std	Y+24, r26	; 0x18
    1c6e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c70:	6e 89       	ldd	r22, Y+22	; 0x16
    1c72:	7f 89       	ldd	r23, Y+23	; 0x17
    1c74:	88 8d       	ldd	r24, Y+24	; 0x18
    1c76:	99 8d       	ldd	r25, Y+25	; 0x19
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	2c f4       	brge	.+10     	; 0x1c92 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9d 8b       	std	Y+21, r25	; 0x15
    1c8e:	8c 8b       	std	Y+20, r24	; 0x14
    1c90:	3f c0       	rjmp	.+126    	; 0x1d10 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1c92:	6e 89       	ldd	r22, Y+22	; 0x16
    1c94:	7f 89       	ldd	r23, Y+23	; 0x17
    1c96:	88 8d       	ldd	r24, Y+24	; 0x18
    1c98:	99 8d       	ldd	r25, Y+25	; 0x19
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	57 e4       	ldi	r21, 0x47	; 71
    1ca2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	4c f5       	brge	.+82     	; 0x1cfc <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1cac:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cae:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cb0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9d 8b       	std	Y+21, r25	; 0x15
    1cd0:	8c 8b       	std	Y+20, r24	; 0x14
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <LCD_voidInit+0x42c>
    1cd4:	88 ec       	ldi	r24, 0xC8	; 200
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9b 8b       	std	Y+19, r25	; 0x13
    1cda:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cdc:	8a 89       	ldd	r24, Y+18	; 0x12
    1cde:	9b 89       	ldd	r25, Y+19	; 0x13
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_voidInit+0x41a>
    1ce4:	9b 8b       	std	Y+19, r25	; 0x13
    1ce6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cea:	9d 89       	ldd	r25, Y+21	; 0x15
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9d 8b       	std	Y+21, r25	; 0x15
    1cf0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf4:	9d 89       	ldd	r25, Y+21	; 0x15
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <LCD_voidInit+0x40e>
    1cfa:	24 c0       	rjmp	.+72     	; 0x1d44 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfc:	6e 89       	ldd	r22, Y+22	; 0x16
    1cfe:	7f 89       	ldd	r23, Y+23	; 0x17
    1d00:	88 8d       	ldd	r24, Y+24	; 0x18
    1d02:	99 8d       	ldd	r25, Y+25	; 0x19
    1d04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9d 8b       	std	Y+21, r25	; 0x15
    1d0e:	8c 8b       	std	Y+20, r24	; 0x14
    1d10:	8c 89       	ldd	r24, Y+20	; 0x14
    1d12:	9d 89       	ldd	r25, Y+21	; 0x15
    1d14:	99 8b       	std	Y+17, r25	; 0x11
    1d16:	88 8b       	std	Y+16, r24	; 0x10
    1d18:	88 89       	ldd	r24, Y+16	; 0x10
    1d1a:	99 89       	ldd	r25, Y+17	; 0x11
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_voidInit+0x456>
    1d20:	99 8b       	std	Y+17, r25	; 0x11
    1d22:	88 8b       	std	Y+16, r24	; 0x10
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d26:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d28:	78 a1       	ldd	r23, Y+32	; 0x20
    1d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8e 8f       	std	Y+30, r24	; 0x1e
    1d38:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3e:	8a 95       	dec	r24
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <LCD_voidInit+0x478>
    1d42:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidWriteCmnd(0x01);
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_voidWriteCmnd>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	b0 e4       	ldi	r27, 0x40	; 64
    1d52:	8b 87       	std	Y+11, r24	; 0x0b
    1d54:	9c 87       	std	Y+12, r25	; 0x0c
    1d56:	ad 87       	std	Y+13, r26	; 0x0d
    1d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a ef       	ldi	r20, 0xFA	; 250
    1d68:	54 e4       	ldi	r21, 0x44	; 68
    1d6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8f 83       	std	Y+7, r24	; 0x07
    1d74:	98 87       	std	Y+8, r25	; 0x08
    1d76:	a9 87       	std	Y+9, r26	; 0x09
    1d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7c:	78 85       	ldd	r23, Y+8	; 0x08
    1d7e:	89 85       	ldd	r24, Y+9	; 0x09
    1d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <LCD_voidInit+0x4d6>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCD_voidInit+0x536>
    1dde:	88 ec       	ldi	r24, 0xC8	; 200
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_voidInit+0x524>
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <LCD_voidInit+0x518>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_voidInit+0x560>
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidWriteCmnd(0b00000110);
    1e2e:	86 e0       	ldi	r24, 0x06	; 6
    1e30:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_voidWriteCmnd>
}
    1e34:	c4 5b       	subi	r28, 0xB4	; 180
    1e36:	df 4f       	sbci	r29, 0xFF	; 255
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	08 95       	ret

00001e4c <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 Copy_u8Char)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	69 97       	sbiw	r28, 0x19	; 25
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	89 8f       	std	Y+25, r24	; 0x19
	/* RS = 1 (Data Byte) 		*/
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	60 e0       	ldi	r22, 0x00	; 0
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_u8SetPinValue>
	/* RW = 0 (Write Operation) */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	61 e0       	ldi	r22, 0x01	; 1
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_u8SetPinValue>
	/* Send Data Byte to LCD 	*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	69 8d       	ldd	r22, Y+25	; 0x19
    1e7a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <DIO_u8SetPortValue>
	/* Enable Pulse				*/
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	62 e0       	ldi	r22, 0x02	; 2
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_u8SetPinValue>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a0 e8       	ldi	r26, 0x80	; 128
    1e8e:	bf e3       	ldi	r27, 0x3F	; 63
    1e90:	8d 8b       	std	Y+21, r24	; 0x15
    1e92:	9e 8b       	std	Y+22, r25	; 0x16
    1e94:	af 8b       	std	Y+23, r26	; 0x17
    1e96:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e98:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea0:	2b ea       	ldi	r18, 0xAB	; 171
    1ea2:	3a ea       	ldi	r19, 0xAA	; 170
    1ea4:	4a e2       	ldi	r20, 0x2A	; 42
    1ea6:	50 e4       	ldi	r21, 0x40	; 64
    1ea8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	89 8b       	std	Y+17, r24	; 0x11
    1eb2:	9a 8b       	std	Y+18, r25	; 0x12
    1eb4:	ab 8b       	std	Y+19, r26	; 0x13
    1eb6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1eb8:	69 89       	ldd	r22, Y+17	; 0x11
    1eba:	7a 89       	ldd	r23, Y+18	; 0x12
    1ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e8       	ldi	r20, 0x80	; 128
    1ec6:	5f e3       	ldi	r21, 0x3F	; 63
    1ec8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ecc:	88 23       	and	r24, r24
    1ece:	1c f4       	brge	.+6      	; 0x1ed6 <LCD_voidWriteChar+0x8a>
		__ticks = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	88 8b       	std	Y+16, r24	; 0x10
    1ed4:	91 c0       	rjmp	.+290    	; 0x1ff8 <LCD_voidWriteChar+0x1ac>
	else if (__tmp > 255)
    1ed6:	69 89       	ldd	r22, Y+17	; 0x11
    1ed8:	7a 89       	ldd	r23, Y+18	; 0x12
    1eda:	8b 89       	ldd	r24, Y+19	; 0x13
    1edc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	53 e4       	ldi	r21, 0x43	; 67
    1ee6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	0c f0       	brlt	.+2      	; 0x1ef0 <LCD_voidWriteChar+0xa4>
    1eee:	7b c0       	rjmp	.+246    	; 0x1fe6 <LCD_voidWriteChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8c 87       	std	Y+12, r24	; 0x0c
    1f0a:	9d 87       	std	Y+13, r25	; 0x0d
    1f0c:	ae 87       	std	Y+14, r26	; 0x0e
    1f0e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f12:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f14:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f16:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a ef       	ldi	r20, 0xFA	; 250
    1f1e:	54 e4       	ldi	r21, 0x44	; 68
    1f20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	88 87       	std	Y+8, r24	; 0x08
    1f2a:	99 87       	std	Y+9, r25	; 0x09
    1f2c:	aa 87       	std	Y+10, r26	; 0x0a
    1f2e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f30:	68 85       	ldd	r22, Y+8	; 0x08
    1f32:	79 85       	ldd	r23, Y+9	; 0x09
    1f34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f36:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <LCD_voidWriteChar+0x106>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9f 83       	std	Y+7, r25	; 0x07
    1f4e:	8e 83       	std	Y+6, r24	; 0x06
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <LCD_voidWriteChar+0x184>
	else if (__tmp > 65535)
    1f52:	68 85       	ldd	r22, Y+8	; 0x08
    1f54:	79 85       	ldd	r23, Y+9	; 0x09
    1f56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <LCD_voidWriteChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f6c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f70:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9f 83       	std	Y+7, r25	; 0x07
    1f90:	8e 83       	std	Y+6, r24	; 0x06
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <LCD_voidWriteChar+0x166>
    1f94:	88 ec       	ldi	r24, 0xC8	; 200
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9d 83       	std	Y+5, r25	; 0x05
    1f9a:	8c 83       	std	Y+4, r24	; 0x04
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_voidWriteChar+0x154>
    1fa4:	9d 83       	std	Y+5, r25	; 0x05
    1fa6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	9f 81       	ldd	r25, Y+7	; 0x07
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9f 83       	std	Y+7, r25	; 0x07
    1fb0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <LCD_voidWriteChar+0x148>
    1fba:	24 c0       	rjmp	.+72     	; 0x2004 <LCD_voidWriteChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	68 85       	ldd	r22, Y+8	; 0x08
    1fbe:	79 85       	ldd	r23, Y+9	; 0x09
    1fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9f 83       	std	Y+7, r25	; 0x07
    1fce:	8e 83       	std	Y+6, r24	; 0x06
    1fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd4:	9b 83       	std	Y+3, r25	; 0x03
    1fd6:	8a 83       	std	Y+2, r24	; 0x02
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	9b 81       	ldd	r25, Y+3	; 0x03
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_voidWriteChar+0x190>
    1fe0:	9b 83       	std	Y+3, r25	; 0x03
    1fe2:	8a 83       	std	Y+2, r24	; 0x02
    1fe4:	0f c0       	rjmp	.+30     	; 0x2004 <LCD_voidWriteChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe6:	69 89       	ldd	r22, Y+17	; 0x11
    1fe8:	7a 89       	ldd	r23, Y+18	; 0x12
    1fea:	8b 89       	ldd	r24, Y+19	; 0x13
    1fec:	9c 89       	ldd	r25, Y+20	; 0x14
    1fee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	88 8b       	std	Y+16, r24	; 0x10
    1ff8:	88 89       	ldd	r24, Y+16	; 0x10
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	8a 95       	dec	r24
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_voidWriteChar+0x1b2>
    2002:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	62 e0       	ldi	r22, 0x02	; 2
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_u8SetPinValue>
}
    200e:	69 96       	adiw	r28, 0x19	; 25
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <LCD_voidWriteCmnd>:

void LCD_voidWriteCmnd (u8 Copy_u8Cmnd)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	69 97       	sbiw	r28, 0x19	; 25
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	89 8f       	std	Y+25, r24	; 0x19
	/* RS = 0 (Command Byte) 		*/
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_u8SetPinValue>
	/* RW = 0 (Write Operation) */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_u8SetPinValue>
	/* Send Data Byte to LCD 	*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    204a:	83 e0       	ldi	r24, 0x03	; 3
    204c:	69 8d       	ldd	r22, Y+25	; 0x19
    204e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <DIO_u8SetPortValue>
	/* Enable Pulse				*/
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	62 e0       	ldi	r22, 0x02	; 2
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_u8SetPinValue>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a0 e8       	ldi	r26, 0x80	; 128
    2062:	bf e3       	ldi	r27, 0x3F	; 63
    2064:	8d 8b       	std	Y+21, r24	; 0x15
    2066:	9e 8b       	std	Y+22, r25	; 0x16
    2068:	af 8b       	std	Y+23, r26	; 0x17
    206a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    206c:	6d 89       	ldd	r22, Y+21	; 0x15
    206e:	7e 89       	ldd	r23, Y+22	; 0x16
    2070:	8f 89       	ldd	r24, Y+23	; 0x17
    2072:	98 8d       	ldd	r25, Y+24	; 0x18
    2074:	2b ea       	ldi	r18, 0xAB	; 171
    2076:	3a ea       	ldi	r19, 0xAA	; 170
    2078:	4a e2       	ldi	r20, 0x2A	; 42
    207a:	50 e4       	ldi	r21, 0x40	; 64
    207c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	89 8b       	std	Y+17, r24	; 0x11
    2086:	9a 8b       	std	Y+18, r25	; 0x12
    2088:	ab 8b       	std	Y+19, r26	; 0x13
    208a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    208c:	69 89       	ldd	r22, Y+17	; 0x11
    208e:	7a 89       	ldd	r23, Y+18	; 0x12
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e8       	ldi	r20, 0x80	; 128
    209a:	5f e3       	ldi	r21, 0x3F	; 63
    209c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20a0:	88 23       	and	r24, r24
    20a2:	1c f4       	brge	.+6      	; 0x20aa <LCD_voidWriteCmnd+0x8a>
		__ticks = 1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	88 8b       	std	Y+16, r24	; 0x10
    20a8:	91 c0       	rjmp	.+290    	; 0x21cc <LCD_voidWriteCmnd+0x1ac>
	else if (__tmp > 255)
    20aa:	69 89       	ldd	r22, Y+17	; 0x11
    20ac:	7a 89       	ldd	r23, Y+18	; 0x12
    20ae:	8b 89       	ldd	r24, Y+19	; 0x13
    20b0:	9c 89       	ldd	r25, Y+20	; 0x14
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	53 e4       	ldi	r21, 0x43	; 67
    20ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	0c f0       	brlt	.+2      	; 0x20c4 <LCD_voidWriteCmnd+0xa4>
    20c2:	7b c0       	rjmp	.+246    	; 0x21ba <LCD_voidWriteCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    20c4:	6d 89       	ldd	r22, Y+21	; 0x15
    20c6:	7e 89       	ldd	r23, Y+22	; 0x16
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a e7       	ldi	r20, 0x7A	; 122
    20d2:	54 e4       	ldi	r21, 0x44	; 68
    20d4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8c 87       	std	Y+12, r24	; 0x0c
    20de:	9d 87       	std	Y+13, r25	; 0x0d
    20e0:	ae 87       	std	Y+14, r26	; 0x0e
    20e2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    20e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	88 87       	std	Y+8, r24	; 0x08
    20fe:	99 87       	std	Y+9, r25	; 0x09
    2100:	aa 87       	std	Y+10, r26	; 0x0a
    2102:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2104:	68 85       	ldd	r22, Y+8	; 0x08
    2106:	79 85       	ldd	r23, Y+9	; 0x09
    2108:	8a 85       	ldd	r24, Y+10	; 0x0a
    210a:	9b 85       	ldd	r25, Y+11	; 0x0b
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <LCD_voidWriteCmnd+0x106>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9f 83       	std	Y+7, r25	; 0x07
    2122:	8e 83       	std	Y+6, r24	; 0x06
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <LCD_voidWriteCmnd+0x184>
	else if (__tmp > 65535)
    2126:	68 85       	ldd	r22, Y+8	; 0x08
    2128:	79 85       	ldd	r23, Y+9	; 0x09
    212a:	8a 85       	ldd	r24, Y+10	; 0x0a
    212c:	9b 85       	ldd	r25, Y+11	; 0x0b
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <LCD_voidWriteCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2140:	7d 85       	ldd	r23, Y+13	; 0x0d
    2142:	8e 85       	ldd	r24, Y+14	; 0x0e
    2144:	9f 85       	ldd	r25, Y+15	; 0x0f
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9f 83       	std	Y+7, r25	; 0x07
    2164:	8e 83       	std	Y+6, r24	; 0x06
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <LCD_voidWriteCmnd+0x166>
    2168:	88 ec       	ldi	r24, 0xC8	; 200
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9d 83       	std	Y+5, r25	; 0x05
    216e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_voidWriteCmnd+0x154>
    2178:	9d 83       	std	Y+5, r25	; 0x05
    217a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8e 81       	ldd	r24, Y+6	; 0x06
    217e:	9f 81       	ldd	r25, Y+7	; 0x07
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9f 83       	std	Y+7, r25	; 0x07
    2184:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8e 81       	ldd	r24, Y+6	; 0x06
    2188:	9f 81       	ldd	r25, Y+7	; 0x07
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <LCD_voidWriteCmnd+0x148>
    218e:	24 c0       	rjmp	.+72     	; 0x21d8 <LCD_voidWriteCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	68 85       	ldd	r22, Y+8	; 0x08
    2192:	79 85       	ldd	r23, Y+9	; 0x09
    2194:	8a 85       	ldd	r24, Y+10	; 0x0a
    2196:	9b 85       	ldd	r25, Y+11	; 0x0b
    2198:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9f 83       	std	Y+7, r25	; 0x07
    21a2:	8e 83       	std	Y+6, r24	; 0x06
    21a4:	8e 81       	ldd	r24, Y+6	; 0x06
    21a6:	9f 81       	ldd	r25, Y+7	; 0x07
    21a8:	9b 83       	std	Y+3, r25	; 0x03
    21aa:	8a 83       	std	Y+2, r24	; 0x02
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	9b 81       	ldd	r25, Y+3	; 0x03
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_voidWriteCmnd+0x190>
    21b4:	9b 83       	std	Y+3, r25	; 0x03
    21b6:	8a 83       	std	Y+2, r24	; 0x02
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <LCD_voidWriteCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21ba:	69 89       	ldd	r22, Y+17	; 0x11
    21bc:	7a 89       	ldd	r23, Y+18	; 0x12
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	88 8b       	std	Y+16, r24	; 0x10
    21cc:	88 89       	ldd	r24, Y+16	; 0x10
    21ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	8a 95       	dec	r24
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCD_voidWriteCmnd+0x1b2>
    21d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	62 e0       	ldi	r22, 0x02	; 2
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0e 94 97 08 	call	0x112e	; 0x112e <DIO_u8SetPinValue>
}
    21e2:	69 96       	adiw	r28, 0x19	; 25
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <LCD_voidWriteString>:



void LCD_voidWriteString(u8 *Copy_pu8String)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <LCD_voidWriteString+0x6>
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	9b 83       	std	Y+3, r25	; 0x03
    2202:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_stringcounter = 0;
    2204:	19 82       	std	Y+1, r1	; 0x01
    2206:	0e c0       	rjmp	.+28     	; 0x2224 <LCD_voidWriteString+0x30>
	/*	Send Data Byte to LCD	*/
	while (Copy_pu8String[Local_u8_stringcounter] != '\0')
	{
		LCD_voidWriteChar(Copy_pu8String[Local_u8_stringcounter]);
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	9b 81       	ldd	r25, Y+3	; 0x03
    2212:	fc 01       	movw	r30, r24
    2214:	e2 0f       	add	r30, r18
    2216:	f3 1f       	adc	r31, r19
    2218:	80 81       	ld	r24, Z
    221a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_voidWriteChar>
		Local_u8_stringcounter++;
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	8f 5f       	subi	r24, 0xFF	; 255
    2222:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 *Copy_pu8String)
{
	u8 Local_u8_stringcounter = 0;
	/*	Send Data Byte to LCD	*/
	while (Copy_pu8String[Local_u8_stringcounter] != '\0')
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	9b 81       	ldd	r25, Y+3	; 0x03
    222e:	fc 01       	movw	r30, r24
    2230:	e2 0f       	add	r30, r18
    2232:	f3 1f       	adc	r31, r19
    2234:	80 81       	ld	r24, Z
    2236:	88 23       	and	r24, r24
    2238:	39 f7       	brne	.-50     	; 0x2208 <LCD_voidWriteString+0x14>
	{
		LCD_voidWriteChar(Copy_pu8String[Local_u8_stringcounter]);
		Local_u8_stringcounter++;
	}

}
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u16 Copy_u16Number)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	27 97       	sbiw	r28, 0x07	; 7
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	9f 83       	std	Y+7, r25	; 0x07
    225c:	8e 83       	std	Y+6, r24	; 0x06
	u16 Local_u16_Remaining;
	u16 Local_u16_Reverse = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9b 83       	std	Y+3, r25	; 0x03
    2264:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_FinalReverse;

	if (Copy_u16Number == 0)
    2266:	8e 81       	ldd	r24, Y+6	; 0x06
    2268:	9f 81       	ldd	r25, Y+7	; 0x07
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	51 f5       	brne	.+84     	; 0x22c2 <LCD_voidWriteNumber+0x7c>
	{
		LCD_voidWriteChar(Copy_u16Number + '0');
    226e:	8e 81       	ldd	r24, Y+6	; 0x06
    2270:	80 5d       	subi	r24, 0xD0	; 208
    2272:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_voidWriteChar>
    2276:	45 c0       	rjmp	.+138    	; 0x2302 <LCD_voidWriteNumber+0xbc>
	}
	else
	{
		while (Copy_u16Number != 0)
		{
			Local_u16_Remaining = Copy_u16Number % 10;
    2278:	8e 81       	ldd	r24, Y+6	; 0x06
    227a:	9f 81       	ldd	r25, Y+7	; 0x07
    227c:	2a e0       	ldi	r18, 0x0A	; 10
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	b9 01       	movw	r22, r18
    2282:	0e 94 df 1a 	call	0x35be	; 0x35be <__udivmodhi4>
    2286:	9d 83       	std	Y+5, r25	; 0x05
    2288:	8c 83       	std	Y+4, r24	; 0x04
			Local_u16_Reverse = Local_u16_Reverse * 10 + Local_u16_Remaining;
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	9b 81       	ldd	r25, Y+3	; 0x03
    228e:	9c 01       	movw	r18, r24
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	c9 01       	movw	r24, r18
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	28 0f       	add	r18, r24
    22a0:	39 1f       	adc	r19, r25
    22a2:	8c 81       	ldd	r24, Y+4	; 0x04
    22a4:	9d 81       	ldd	r25, Y+5	; 0x05
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	9b 83       	std	Y+3, r25	; 0x03
    22ac:	8a 83       	std	Y+2, r24	; 0x02
			Copy_u16Number /= 10;
    22ae:	8e 81       	ldd	r24, Y+6	; 0x06
    22b0:	9f 81       	ldd	r25, Y+7	; 0x07
    22b2:	2a e0       	ldi	r18, 0x0A	; 10
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	b9 01       	movw	r22, r18
    22b8:	0e 94 df 1a 	call	0x35be	; 0x35be <__udivmodhi4>
    22bc:	cb 01       	movw	r24, r22
    22be:	9f 83       	std	Y+7, r25	; 0x07
    22c0:	8e 83       	std	Y+6, r24	; 0x06
	{
		LCD_voidWriteChar(Copy_u16Number + '0');
	}
	else
	{
		while (Copy_u16Number != 0)
    22c2:	8e 81       	ldd	r24, Y+6	; 0x06
    22c4:	9f 81       	ldd	r25, Y+7	; 0x07
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	b9 f6       	brne	.-82     	; 0x2278 <LCD_voidWriteNumber+0x32>
    22ca:	16 c0       	rjmp	.+44     	; 0x22f8 <LCD_voidWriteNumber+0xb2>
			Local_u16_Reverse = Local_u16_Reverse * 10 + Local_u16_Remaining;
			Copy_u16Number /= 10;
		}
		while (Local_u16_Reverse != 1)
		{
			Local_u8_FinalReverse = Local_u16_Reverse % 10;
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	2a e0       	ldi	r18, 0x0A	; 10
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	b9 01       	movw	r22, r18
    22d6:	0e 94 df 1a 	call	0x35be	; 0x35be <__udivmodhi4>
    22da:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidWriteChar (Local_u8_FinalReverse + '0');
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	80 5d       	subi	r24, 0xD0	; 208
    22e0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_voidWriteChar>
			Local_u16_Reverse /= 10;
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	9b 81       	ldd	r25, Y+3	; 0x03
    22e8:	2a e0       	ldi	r18, 0x0A	; 10
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	b9 01       	movw	r22, r18
    22ee:	0e 94 df 1a 	call	0x35be	; 0x35be <__udivmodhi4>
    22f2:	cb 01       	movw	r24, r22
    22f4:	9b 83       	std	Y+3, r25	; 0x03
    22f6:	8a 83       	std	Y+2, r24	; 0x02
		{
			Local_u16_Remaining = Copy_u16Number % 10;
			Local_u16_Reverse = Local_u16_Reverse * 10 + Local_u16_Remaining;
			Copy_u16Number /= 10;
		}
		while (Local_u16_Reverse != 1)
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	9b 81       	ldd	r25, Y+3	; 0x03
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	91 05       	cpc	r25, r1
    2300:	29 f7       	brne	.-54     	; 0x22cc <LCD_voidWriteNumber+0x86>
			Local_u8_FinalReverse = Local_u16_Reverse % 10;
			LCD_voidWriteChar (Local_u8_FinalReverse + '0');
			Local_u16_Reverse /= 10;
		}
	}
}
    2302:	27 96       	adiw	r28, 0x07	; 7
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8CharLocation)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <LCD_u8GoToXY+0x6>
    231a:	00 d0       	rcall	.+0      	; 0x231c <LCD_u8GoToXY+0x8>
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	8a 83       	std	Y+2, r24	; 0x02
    2322:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	/* Location of first line */
	if(Copy_u8LineNum == 0)
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	88 23       	and	r24, r24
    2328:	19 f4       	brne	.+6      	; 0x2330 <LCD_u8GoToXY+0x1c>
	{
		Local_u8Adress = Copy_u8CharLocation;
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	06 c0       	rjmp	.+12     	; 0x233c <LCD_u8GoToXY+0x28>
	}
	/* Location is at second line */
	else if (Copy_u8LineNum == 1)
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	19 f4       	brne	.+6      	; 0x233c <LCD_u8GoToXY+0x28>
	{
		Local_u8Adress = Copy_u8CharLocation + 0x40;
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	80 5c       	subi	r24, 0xC0	; 192
    233a:	89 83       	std	Y+1, r24	; 0x01
	}
	/* set bit num 8 to 1 */
	LCD_voidWriteCmnd(Local_u8Adress + 128);
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	80 58       	subi	r24, 0x80	; 128
    2340:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_voidWriteCmnd>
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <LCD_voidWriteSpecialCharacter>:

void LCD_voidWriteSpecialCharacter(u8 *Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	27 97       	sbiw	r28, 0x07	; 7
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
    236a:	6d 83       	std	Y+5, r22	; 0x05
    236c:	4e 83       	std	Y+6, r20	; 0x06
    236e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress = 0 , Local_u8Iterator;
    2370:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM Adress whose each block is 8 bytes */
	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	8a 83       	std	Y+2, r24	; 0x02
	/* Send CGRAM adress command to LCD with setting bit 6 , clearing bit 7 (already cleared) */
	LCD_voidWriteCmnd(Local_u8CGRAMAdress + 64);
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	80 5c       	subi	r24, 0xC0	; 192
    238a:	0e 94 10 10 	call	0x2020	; 0x2020 <LCD_voidWriteCmnd>
	/* Write pattern into CGRAM */
	for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator ++)
    238e:	19 82       	std	Y+1, r1	; 0x01
    2390:	0e c0       	rjmp	.+28     	; 0x23ae <LCD_voidWriteSpecialCharacter+0x5c>
	{
		LCD_voidWriteChar(Copy_pu8Pattern[Local_u8Iterator]);
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	fc 01       	movw	r30, r24
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
    23a2:	80 81       	ld	r24, Z
    23a4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_voidWriteChar>
	/* Calculate the CGRAM Adress whose each block is 8 bytes */
	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
	/* Send CGRAM adress command to LCD with setting bit 6 , clearing bit 7 (already cleared) */
	LCD_voidWriteCmnd(Local_u8CGRAMAdress + 64);
	/* Write pattern into CGRAM */
	for(Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator ++)
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	8f 5f       	subi	r24, 0xFF	; 255
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	88 30       	cpi	r24, 0x08	; 8
    23b2:	78 f3       	brcs	.-34     	; 0x2392 <LCD_voidWriteSpecialCharacter+0x40>
	{
		LCD_voidWriteChar(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/* Go back to DDRAM to display the pattern */
	LCD_u8GoToXY(Copy_u8XPos,Copy_u8YPos);
    23b4:	8e 81       	ldd	r24, Y+6	; 0x06
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
	/* Display the pattern written in the CGRAM */
	LCD_voidWriteChar(Copy_u8PatternNumber);
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_voidWriteChar>
}
    23c2:	27 96       	adiw	r28, 0x07	; 7
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <LCD_voidClear>:

void LCD_voidClear(void)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
	LCD_u8GoToXY(0,0);
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
	LCD_voidWriteString("                                                       ");
    23e4:	80 e6       	ldi	r24, 0x60	; 96
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_voidWriteString>
	LCD_u8GoToXY(0,0);
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
}
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <main>:

#include <avr/delay.h>

u8 calc (u8 n, u8 n1, u8 n2);
int main (void)
{
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	ca 59       	subi	r28, 0x9A	; 154
    2408:	d0 40       	sbci	r29, 0x00	; 0
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
	DIO_u8Init();
    2414:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_u8Init>
	LCD_voidInit();
    2418:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <LCD_voidInit>
	u8 arth[4] = {'+','-','*','/'};
    241c:	fe 01       	movw	r30, r28
    241e:	ec 56       	subi	r30, 0x6C	; 108
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	8b e2       	ldi	r24, 0x2B	; 43
    2424:	80 83       	st	Z, r24
    2426:	fe 01       	movw	r30, r28
    2428:	ec 56       	subi	r30, 0x6C	; 108
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	8d e2       	ldi	r24, 0x2D	; 45
    242e:	81 83       	std	Z+1, r24	; 0x01
    2430:	fe 01       	movw	r30, r28
    2432:	ec 56       	subi	r30, 0x6C	; 108
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	8a e2       	ldi	r24, 0x2A	; 42
    2438:	82 83       	std	Z+2, r24	; 0x02
    243a:	fe 01       	movw	r30, r28
    243c:	ec 56       	subi	r30, 0x6C	; 108
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	8f e2       	ldi	r24, 0x2F	; 47
    2442:	83 83       	std	Z+3, r24	; 0x03
	u8 up = 1, down = 1, enter = 1;
    2444:	fe 01       	movw	r30, r28
    2446:	e8 56       	subi	r30, 0x68	; 104
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	80 83       	st	Z, r24
    244e:	fe 01       	movw	r30, r28
    2450:	e7 56       	subi	r30, 0x67	; 103
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	80 83       	st	Z, r24
    2458:	fe 01       	movw	r30, r28
    245a:	e6 56       	subi	r30, 0x66	; 102
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	80 83       	st	Z, r24
	LCD_u8GoToXY(0,0);
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
	u8 Yindex = 0 , n = 0 ,n1 = 0, n2 = 0, ans = 0;
    246a:	fe 01       	movw	r30, r28
    246c:	ed 56       	subi	r30, 0x6D	; 109
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	10 82       	st	Z, r1
    2472:	fe 01       	movw	r30, r28
    2474:	ee 56       	subi	r30, 0x6E	; 110
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	10 82       	st	Z, r1
    247a:	fe 01       	movw	r30, r28
    247c:	ef 56       	subi	r30, 0x6F	; 111
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	10 82       	st	Z, r1
    2482:	fe 01       	movw	r30, r28
    2484:	e0 57       	subi	r30, 0x70	; 112
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	10 82       	st	Z, r1
    248a:	fe 01       	movw	r30, r28
    248c:	e1 57       	subi	r30, 0x71	; 113
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	10 82       	st	Z, r1
	u16 delay = 500;
    2492:	fe 01       	movw	r30, r28
    2494:	e3 57       	subi	r30, 0x73	; 115
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	84 ef       	ldi	r24, 0xF4	; 244
    249a:	91 e0       	ldi	r25, 0x01	; 1
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	80 83       	st	Z, r24

	LCD_voidClear();
    24a0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_voidClear>
	while (1)
	{
		// get values from the input PBs
		DIO_u8GetPinValue(DIO_u8_PORTC,DIO_u8_PIN3,&up);
    24a4:	9e 01       	movw	r18, r28
    24a6:	28 56       	subi	r18, 0x68	; 104
    24a8:	3f 4f       	sbci	r19, 0xFF	; 255
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	63 e0       	ldi	r22, 0x03	; 3
    24ae:	a9 01       	movw	r20, r18
    24b0:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_u8_PORTC,DIO_u8_PIN4,&down);
    24b4:	9e 01       	movw	r18, r28
    24b6:	27 56       	subi	r18, 0x67	; 103
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	64 e0       	ldi	r22, 0x04	; 4
    24be:	a9 01       	movw	r20, r18
    24c0:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8GetPinValue>
		DIO_u8GetPinValue(DIO_u8_PORTC,DIO_u8_PIN5,&enter);
    24c4:	9e 01       	movw	r18, r28
    24c6:	26 56       	subi	r18, 0x66	; 102
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	82 e0       	ldi	r24, 0x02	; 2
    24cc:	65 e0       	ldi	r22, 0x05	; 5
    24ce:	a9 01       	movw	r20, r18
    24d0:	0e 94 bf 09 	call	0x137e	; 0x137e <DIO_u8GetPinValue>
		// got to the next locaion
		if (enter != 1 && Yindex < 2)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e6 56       	subi	r30, 0x66	; 102
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	09 f4       	brne	.+2      	; 0x24e2 <main+0xe8>
    24e0:	d6 c0       	rjmp	.+428    	; 0x268e <main+0x294>
    24e2:	fe 01       	movw	r30, r28
    24e4:	ed 56       	subi	r30, 0x6D	; 109
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	80 81       	ld	r24, Z
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	08 f0       	brcs	.+2      	; 0x24f0 <main+0xf6>
    24ee:	cf c0       	rjmp	.+414    	; 0x268e <main+0x294>
		{
			Yindex++;
    24f0:	de 01       	movw	r26, r28
    24f2:	ad 56       	subi	r26, 0x6D	; 109
    24f4:	bf 4f       	sbci	r27, 0xFF	; 255
    24f6:	fe 01       	movw	r30, r28
    24f8:	ed 56       	subi	r30, 0x6D	; 109
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	8c 93       	st	X, r24
			LCD_u8GoToXY(0,Yindex);
    2502:	fe 01       	movw	r30, r28
    2504:	ed 56       	subi	r30, 0x6D	; 109
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	60 81       	ld	r22, Z
    250c:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
			_delay_ms(delay);
    2510:	fe 01       	movw	r30, r28
    2512:	e3 57       	subi	r30, 0x73	; 115
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	cc 01       	movw	r24, r24
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	fe 01       	movw	r30, r28
    252e:	e7 57       	subi	r30, 0x77	; 119
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	8e 01       	movw	r16, r28
    253c:	0b 57       	subi	r16, 0x7B	; 123
    253e:	1f 4f       	sbci	r17, 0xFF	; 255
    2540:	fe 01       	movw	r30, r28
    2542:	e7 57       	subi	r30, 0x77	; 119
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a ef       	ldi	r20, 0xFA	; 250
    2554:	54 e4       	ldi	r21, 0x44	; 68
    2556:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	f8 01       	movw	r30, r16
    2560:	80 83       	st	Z, r24
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	a2 83       	std	Z+2, r26	; 0x02
    2566:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2568:	fe 01       	movw	r30, r28
    256a:	eb 57       	subi	r30, 0x7B	; 123
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e8       	ldi	r20, 0x80	; 128
    257c:	5f e3       	ldi	r21, 0x3F	; 63
    257e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2582:	88 23       	and	r24, r24
    2584:	44 f4       	brge	.+16     	; 0x2596 <main+0x19c>
		__ticks = 1;
    2586:	fe 01       	movw	r30, r28
    2588:	ed 57       	subi	r30, 0x7D	; 125
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	80 83       	st	Z, r24
    2594:	64 c0       	rjmp	.+200    	; 0x265e <main+0x264>
	else if (__tmp > 65535)
    2596:	fe 01       	movw	r30, r28
    2598:	eb 57       	subi	r30, 0x7B	; 123
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	3f ef       	ldi	r19, 0xFF	; 255
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	57 e4       	ldi	r21, 0x47	; 71
    25ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	0c f0       	brlt	.+2      	; 0x25b6 <main+0x1bc>
    25b4:	43 c0       	rjmp	.+134    	; 0x263c <main+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	fe 01       	movw	r30, r28
    25b8:	e7 57       	subi	r30, 0x77	; 119
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e2       	ldi	r20, 0x20	; 32
    25ca:	51 e4       	ldi	r21, 0x41	; 65
    25cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8e 01       	movw	r16, r28
    25d6:	0d 57       	subi	r16, 0x7D	; 125
    25d8:	1f 4f       	sbci	r17, 0xFF	; 255
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	f8 01       	movw	r30, r16
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
    25ec:	1f c0       	rjmp	.+62     	; 0x262c <main+0x232>
    25ee:	fe 01       	movw	r30, r28
    25f0:	ef 57       	subi	r30, 0x7F	; 127
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	88 ec       	ldi	r24, 0xC8	; 200
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25fc:	fe 01       	movw	r30, r28
    25fe:	ef 57       	subi	r30, 0x7F	; 127
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <main+0x20c>
    260a:	fe 01       	movw	r30, r28
    260c:	ef 57       	subi	r30, 0x7F	; 127
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	de 01       	movw	r26, r28
    2616:	ad 57       	subi	r26, 0x7D	; 125
    2618:	bf 4f       	sbci	r27, 0xFF	; 255
    261a:	fe 01       	movw	r30, r28
    261c:	ed 57       	subi	r30, 0x7D	; 125
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	11 96       	adiw	r26, 0x01	; 1
    2628:	9c 93       	st	X, r25
    262a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262c:	fe 01       	movw	r30, r28
    262e:	ed 57       	subi	r30, 0x7D	; 125
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	d1 f6       	brne	.-76     	; 0x25ee <main+0x1f4>
    263a:	34 cf       	rjmp	.-408    	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263c:	8e 01       	movw	r16, r28
    263e:	0d 57       	subi	r16, 0x7D	; 125
    2640:	1f 4f       	sbci	r17, 0xFF	; 255
    2642:	fe 01       	movw	r30, r28
    2644:	eb 57       	subi	r30, 0x7B	; 123
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	f8 01       	movw	r30, r16
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
    265e:	de 01       	movw	r26, r28
    2660:	a1 58       	subi	r26, 0x81	; 129
    2662:	bf 4f       	sbci	r27, 0xFF	; 255
    2664:	fe 01       	movw	r30, r28
    2666:	ed 57       	subi	r30, 0x7D	; 125
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	11 96       	adiw	r26, 0x01	; 1
    2670:	9c 93       	st	X, r25
    2672:	8e 93       	st	-X, r24
    2674:	fe 01       	movw	r30, r28
    2676:	e1 58       	subi	r30, 0x81	; 129
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <main+0x284>
    2682:	fe 01       	movw	r30, r28
    2684:	e1 58       	subi	r30, 0x81	; 129
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24
    268c:	0b cf       	rjmp	.-490    	; 0x24a4 <main+0xaa>
		}
		// get the final answer
		else if (enter != 1 && Yindex == 2)
    268e:	fe 01       	movw	r30, r28
    2690:	e6 56       	subi	r30, 0x66	; 102
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	09 f4       	brne	.+2      	; 0x269c <main+0x2a2>
    269a:	d0 c1       	rjmp	.+928    	; 0x2a3c <main+0x642>
    269c:	fe 01       	movw	r30, r28
    269e:	ed 56       	subi	r30, 0x6D	; 109
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 81       	ld	r24, Z
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	09 f0       	breq	.+2      	; 0x26aa <main+0x2b0>
    26a8:	c9 c1       	rjmp	.+914    	; 0x2a3c <main+0x642>
		{
			Yindex = 3;
    26aa:	fe 01       	movw	r30, r28
    26ac:	ed 56       	subi	r30, 0x6D	; 109
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	80 83       	st	Z, r24
			LCD_u8GoToXY(0,Yindex);
    26b4:	fe 01       	movw	r30, r28
    26b6:	ed 56       	subi	r30, 0x6D	; 109
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	60 81       	ld	r22, Z
    26be:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
			LCD_voidWriteChar('=');
    26c2:	8d e3       	ldi	r24, 0x3D	; 61
    26c4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_voidWriteChar>
			ans = calc(n, n1, n2);
    26c8:	fe 01       	movw	r30, r28
    26ca:	ee 56       	subi	r30, 0x6E	; 110
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	de 01       	movw	r26, r28
    26d0:	af 56       	subi	r26, 0x6F	; 111
    26d2:	bf 4f       	sbci	r27, 0xFF	; 255
    26d4:	9e 01       	movw	r18, r28
    26d6:	20 57       	subi	r18, 0x70	; 112
    26d8:	3f 4f       	sbci	r19, 0xFF	; 255
    26da:	80 81       	ld	r24, Z
    26dc:	6c 91       	ld	r22, X
    26de:	f9 01       	movw	r30, r18
    26e0:	40 81       	ld	r20, Z
    26e2:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <calc>
    26e6:	fe 01       	movw	r30, r28
    26e8:	e1 57       	subi	r30, 0x71	; 113
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 83       	st	Z, r24
			if (ans == 255)
    26ee:	fe 01       	movw	r30, r28
    26f0:	e1 57       	subi	r30, 0x71	; 113
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	8f 3f       	cpi	r24, 0xFF	; 255
    26f8:	09 f0       	breq	.+2      	; 0x26fc <main+0x302>
    26fa:	d9 c0       	rjmp	.+434    	; 0x28ae <main+0x4b4>
			{
				LCD_voidClear();
    26fc:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_voidClear>
				LCD_voidWriteString("Error");
    2700:	88 e9       	ldi	r24, 0x98	; 152
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LCD_voidWriteString>
				n = n1 = n2 = 0;
    2708:	fe 01       	movw	r30, r28
    270a:	e0 57       	subi	r30, 0x70	; 112
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	10 82       	st	Z, r1
    2710:	de 01       	movw	r26, r28
    2712:	af 56       	subi	r26, 0x6F	; 111
    2714:	bf 4f       	sbci	r27, 0xFF	; 255
    2716:	fe 01       	movw	r30, r28
    2718:	e0 57       	subi	r30, 0x70	; 112
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 81       	ld	r24, Z
    271e:	8c 93       	st	X, r24
    2720:	de 01       	movw	r26, r28
    2722:	ae 56       	subi	r26, 0x6E	; 110
    2724:	bf 4f       	sbci	r27, 0xFF	; 255
    2726:	fe 01       	movw	r30, r28
    2728:	ef 56       	subi	r30, 0x6F	; 111
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	8c 93       	st	X, r24
				_delay_ms(delay);
    2730:	fe 01       	movw	r30, r28
    2732:	e3 57       	subi	r30, 0x73	; 115
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	cc 01       	movw	r24, r24
    273c:	a0 e0       	ldi	r26, 0x00	; 0
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	bc 01       	movw	r22, r24
    2742:	cd 01       	movw	r24, r26
    2744:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	fe 01       	movw	r30, r28
    274e:	e5 58       	subi	r30, 0x85	; 133
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 83       	st	Z, r24
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	a2 83       	std	Z+2, r26	; 0x02
    2758:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	8e 01       	movw	r16, r28
    275c:	09 58       	subi	r16, 0x89	; 137
    275e:	1f 4f       	sbci	r17, 0xFF	; 255
    2760:	fe 01       	movw	r30, r28
    2762:	e5 58       	subi	r30, 0x85	; 133
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4a ef       	ldi	r20, 0xFA	; 250
    2774:	54 e4       	ldi	r21, 0x44	; 68
    2776:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	f8 01       	movw	r30, r16
    2780:	80 83       	st	Z, r24
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	a2 83       	std	Z+2, r26	; 0x02
    2786:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2788:	fe 01       	movw	r30, r28
    278a:	e9 58       	subi	r30, 0x89	; 137
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	40 e8       	ldi	r20, 0x80	; 128
    279c:	5f e3       	ldi	r21, 0x3F	; 63
    279e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27a2:	88 23       	and	r24, r24
    27a4:	44 f4       	brge	.+16     	; 0x27b6 <main+0x3bc>
		__ticks = 1;
    27a6:	fe 01       	movw	r30, r28
    27a8:	eb 58       	subi	r30, 0x8B	; 139
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
    27b4:	64 c0       	rjmp	.+200    	; 0x287e <main+0x484>
	else if (__tmp > 65535)
    27b6:	fe 01       	movw	r30, r28
    27b8:	e9 58       	subi	r30, 0x89	; 137
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	0c f0       	brlt	.+2      	; 0x27d6 <main+0x3dc>
    27d4:	43 c0       	rjmp	.+134    	; 0x285c <main+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d6:	fe 01       	movw	r30, r28
    27d8:	e5 58       	subi	r30, 0x85	; 133
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e2       	ldi	r20, 0x20	; 32
    27ea:	51 e4       	ldi	r21, 0x41	; 65
    27ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8e 01       	movw	r16, r28
    27f6:	0b 58       	subi	r16, 0x8B	; 139
    27f8:	1f 4f       	sbci	r17, 0xFF	; 255
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	f8 01       	movw	r30, r16
    2808:	91 83       	std	Z+1, r25	; 0x01
    280a:	80 83       	st	Z, r24
    280c:	1f c0       	rjmp	.+62     	; 0x284c <main+0x452>
    280e:	fe 01       	movw	r30, r28
    2810:	ed 58       	subi	r30, 0x8D	; 141
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	88 ec       	ldi	r24, 0xC8	; 200
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
    281c:	fe 01       	movw	r30, r28
    281e:	ed 58       	subi	r30, 0x8D	; 141
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 81       	ld	r24, Z
    2824:	91 81       	ldd	r25, Z+1	; 0x01
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <main+0x42c>
    282a:	fe 01       	movw	r30, r28
    282c:	ed 58       	subi	r30, 0x8D	; 141
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2834:	de 01       	movw	r26, r28
    2836:	ab 58       	subi	r26, 0x8B	; 139
    2838:	bf 4f       	sbci	r27, 0xFF	; 255
    283a:	fe 01       	movw	r30, r28
    283c:	eb 58       	subi	r30, 0x8B	; 139
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	91 81       	ldd	r25, Z+1	; 0x01
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	11 96       	adiw	r26, 0x01	; 1
    2848:	9c 93       	st	X, r25
    284a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	fe 01       	movw	r30, r28
    284e:	eb 58       	subi	r30, 0x8B	; 139
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	d1 f6       	brne	.-76     	; 0x280e <main+0x414>
    285a:	24 ce       	rjmp	.-952    	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285c:	8e 01       	movw	r16, r28
    285e:	0b 58       	subi	r16, 0x8B	; 139
    2860:	1f 4f       	sbci	r17, 0xFF	; 255
    2862:	fe 01       	movw	r30, r28
    2864:	e9 58       	subi	r30, 0x89	; 137
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	f8 01       	movw	r30, r16
    287a:	91 83       	std	Z+1, r25	; 0x01
    287c:	80 83       	st	Z, r24
    287e:	de 01       	movw	r26, r28
    2880:	af 58       	subi	r26, 0x8F	; 143
    2882:	bf 4f       	sbci	r27, 0xFF	; 255
    2884:	fe 01       	movw	r30, r28
    2886:	eb 58       	subi	r30, 0x8B	; 139
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	11 96       	adiw	r26, 0x01	; 1
    2890:	9c 93       	st	X, r25
    2892:	8e 93       	st	-X, r24
    2894:	fe 01       	movw	r30, r28
    2896:	ef 58       	subi	r30, 0x8F	; 143
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0x4a4>
    28a2:	fe 01       	movw	r30, r28
    28a4:	ef 58       	subi	r30, 0x8F	; 143
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	91 83       	std	Z+1, r25	; 0x01
    28aa:	80 83       	st	Z, r24
    28ac:	fb cd       	rjmp	.-1034   	; 0x24a4 <main+0xaa>
			}
			else
			{
				LCD_voidWriteNumber(ans);
    28ae:	fe 01       	movw	r30, r28
    28b0:	e1 57       	subi	r30, 0x71	; 113
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_voidWriteNumber>
				_delay_ms(delay);
    28be:	fe 01       	movw	r30, r28
    28c0:	e3 57       	subi	r30, 0x73	; 115
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	80 81       	ld	r24, Z
    28c6:	91 81       	ldd	r25, Z+1	; 0x01
    28c8:	cc 01       	movw	r24, r24
    28ca:	a0 e0       	ldi	r26, 0x00	; 0
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	fe 01       	movw	r30, r28
    28dc:	e3 59       	subi	r30, 0x93	; 147
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	8e 01       	movw	r16, r28
    28ea:	07 59       	subi	r16, 0x97	; 151
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	e3 59       	subi	r30, 0x93	; 147
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a ef       	ldi	r20, 0xFA	; 250
    2902:	54 e4       	ldi	r21, 0x44	; 68
    2904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2916:	fe 01       	movw	r30, r28
    2918:	e7 59       	subi	r30, 0x97	; 151
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	60 81       	ld	r22, Z
    291e:	71 81       	ldd	r23, Z+1	; 0x01
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	93 81       	ldd	r25, Z+3	; 0x03
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	44 f4       	brge	.+16     	; 0x2944 <main+0x54a>
		__ticks = 1;
    2934:	fe 01       	movw	r30, r28
    2936:	e9 59       	subi	r30, 0x99	; 153
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
    2942:	64 c0       	rjmp	.+200    	; 0x2a0c <main+0x612>
	else if (__tmp > 65535)
    2944:	fe 01       	movw	r30, r28
    2946:	e7 59       	subi	r30, 0x97	; 151
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	0c f0       	brlt	.+2      	; 0x2964 <main+0x56a>
    2962:	43 c0       	rjmp	.+134    	; 0x29ea <main+0x5f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	fe 01       	movw	r30, r28
    2966:	e3 59       	subi	r30, 0x93	; 147
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	51 e4       	ldi	r21, 0x41	; 65
    297a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8e 01       	movw	r16, r28
    2984:	09 59       	subi	r16, 0x99	; 153
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	f8 01       	movw	r30, r16
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	1f c0       	rjmp	.+62     	; 0x29da <main+0x5e0>
    299c:	fe 01       	movw	r30, r28
    299e:	eb 59       	subi	r30, 0x9B	; 155
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	88 ec       	ldi	r24, 0xC8	; 200
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
    29aa:	fe 01       	movw	r30, r28
    29ac:	eb 59       	subi	r30, 0x9B	; 155
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <main+0x5ba>
    29b8:	fe 01       	movw	r30, r28
    29ba:	eb 59       	subi	r30, 0x9B	; 155
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	de 01       	movw	r26, r28
    29c4:	a9 59       	subi	r26, 0x99	; 153
    29c6:	bf 4f       	sbci	r27, 0xFF	; 255
    29c8:	fe 01       	movw	r30, r28
    29ca:	e9 59       	subi	r30, 0x99	; 153
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	11 96       	adiw	r26, 0x01	; 1
    29d6:	9c 93       	st	X, r25
    29d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	fe 01       	movw	r30, r28
    29dc:	e9 59       	subi	r30, 0x99	; 153
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	d1 f6       	brne	.-76     	; 0x299c <main+0x5a2>
    29e8:	5d cd       	rjmp	.-1350   	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	8e 01       	movw	r16, r28
    29ec:	09 59       	subi	r16, 0x99	; 153
    29ee:	1f 4f       	sbci	r17, 0xFF	; 255
    29f0:	fe 01       	movw	r30, r28
    29f2:	e7 59       	subi	r30, 0x97	; 151
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	f8 01       	movw	r30, r16
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	de 01       	movw	r26, r28
    2a0e:	ad 59       	subi	r26, 0x9D	; 157
    2a10:	bf 4f       	sbci	r27, 0xFF	; 255
    2a12:	fe 01       	movw	r30, r28
    2a14:	e9 59       	subi	r30, 0x99	; 153
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24
    2a22:	fe 01       	movw	r30, r28
    2a24:	ed 59       	subi	r30, 0x9D	; 157
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <main+0x632>
    2a30:	fe 01       	movw	r30, r28
    2a32:	ed 59       	subi	r30, 0x9D	; 157
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	34 cd       	rjmp	.-1432   	; 0x24a4 <main+0xaa>
			}
		}
		// reset everthing
		else if (enter != 1 && Yindex == 3)
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e6 56       	subi	r30, 0x66	; 102
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <main+0x650>
    2a48:	e0 c0       	rjmp	.+448    	; 0x2c0a <main+0x810>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ed 56       	subi	r30, 0x6D	; 109
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 81       	ld	r24, Z
    2a52:	83 30       	cpi	r24, 0x03	; 3
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <main+0x65e>
    2a56:	d9 c0       	rjmp	.+434    	; 0x2c0a <main+0x810>
		{
			LCD_voidClear();
    2a58:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_voidClear>
			Yindex = 0;
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ed 56       	subi	r30, 0x6D	; 109
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	10 82       	st	Z, r1
			n = n1 = n2 = 0;
    2a64:	fe 01       	movw	r30, r28
    2a66:	e0 57       	subi	r30, 0x70	; 112
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	10 82       	st	Z, r1
    2a6c:	de 01       	movw	r26, r28
    2a6e:	af 56       	subi	r26, 0x6F	; 111
    2a70:	bf 4f       	sbci	r27, 0xFF	; 255
    2a72:	fe 01       	movw	r30, r28
    2a74:	e0 57       	subi	r30, 0x70	; 112
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	8c 93       	st	X, r24
    2a7c:	de 01       	movw	r26, r28
    2a7e:	ae 56       	subi	r26, 0x6E	; 110
    2a80:	bf 4f       	sbci	r27, 0xFF	; 255
    2a82:	fe 01       	movw	r30, r28
    2a84:	ef 56       	subi	r30, 0x6F	; 111
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	8c 93       	st	X, r24
			_delay_ms(delay);
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e3 57       	subi	r30, 0x73	; 115
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	cc 01       	movw	r24, r24
    2a98:	a0 e0       	ldi	r26, 0x00	; 0
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e1 5a       	subi	r30, 0xA1	; 161
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 83       	st	Z, r24
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	a2 83       	std	Z+2, r26	; 0x02
    2ab4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab6:	8e 01       	movw	r16, r28
    2ab8:	05 5a       	subi	r16, 0xA5	; 165
    2aba:	1f 4f       	sbci	r17, 0xFF	; 255
    2abc:	fe 01       	movw	r30, r28
    2abe:	e1 5a       	subi	r30, 0xA1	; 161
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	4a ef       	ldi	r20, 0xFA	; 250
    2ad0:	54 e4       	ldi	r21, 0x44	; 68
    2ad2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	f8 01       	movw	r30, r16
    2adc:	80 83       	st	Z, r24
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	a2 83       	std	Z+2, r26	; 0x02
    2ae2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e5 5a       	subi	r30, 0xA5	; 165
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	44 f4       	brge	.+16     	; 0x2b12 <main+0x718>
		__ticks = 1;
    2b02:	fe 01       	movw	r30, r28
    2b04:	e7 5a       	subi	r30, 0xA7	; 167
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	80 83       	st	Z, r24
    2b10:	64 c0       	rjmp	.+200    	; 0x2bda <main+0x7e0>
	else if (__tmp > 65535)
    2b12:	fe 01       	movw	r30, r28
    2b14:	e5 5a       	subi	r30, 0xA5	; 165
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	60 81       	ld	r22, Z
    2b1a:	71 81       	ldd	r23, Z+1	; 0x01
    2b1c:	82 81       	ldd	r24, Z+2	; 0x02
    2b1e:	93 81       	ldd	r25, Z+3	; 0x03
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	57 e4       	ldi	r21, 0x47	; 71
    2b28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	0c f0       	brlt	.+2      	; 0x2b32 <main+0x738>
    2b30:	43 c0       	rjmp	.+134    	; 0x2bb8 <main+0x7be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b32:	fe 01       	movw	r30, r28
    2b34:	e1 5a       	subi	r30, 0xA1	; 161
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	60 81       	ld	r22, Z
    2b3a:	71 81       	ldd	r23, Z+1	; 0x01
    2b3c:	82 81       	ldd	r24, Z+2	; 0x02
    2b3e:	93 81       	ldd	r25, Z+3	; 0x03
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e2       	ldi	r20, 0x20	; 32
    2b46:	51 e4       	ldi	r21, 0x41	; 65
    2b48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	8e 01       	movw	r16, r28
    2b52:	07 5a       	subi	r16, 0xA7	; 167
    2b54:	1f 4f       	sbci	r17, 0xFF	; 255
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	f8 01       	movw	r30, r16
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	80 83       	st	Z, r24
    2b68:	1f c0       	rjmp	.+62     	; 0x2ba8 <main+0x7ae>
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e9 5a       	subi	r30, 0xA9	; 169
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	88 ec       	ldi	r24, 0xC8	; 200
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	80 83       	st	Z, r24
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e9 5a       	subi	r30, 0xA9	; 169
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <main+0x788>
    2b86:	fe 01       	movw	r30, r28
    2b88:	e9 5a       	subi	r30, 0xA9	; 169
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b90:	de 01       	movw	r26, r28
    2b92:	a7 5a       	subi	r26, 0xA7	; 167
    2b94:	bf 4f       	sbci	r27, 0xFF	; 255
    2b96:	fe 01       	movw	r30, r28
    2b98:	e7 5a       	subi	r30, 0xA7	; 167
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	11 96       	adiw	r26, 0x01	; 1
    2ba4:	9c 93       	st	X, r25
    2ba6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e7 5a       	subi	r30, 0xA7	; 167
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	d1 f6       	brne	.-76     	; 0x2b6a <main+0x770>
    2bb6:	76 cc       	rjmp	.-1812   	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	8e 01       	movw	r16, r28
    2bba:	07 5a       	subi	r16, 0xA7	; 167
    2bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e5 5a       	subi	r30, 0xA5	; 165
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	60 81       	ld	r22, Z
    2bc6:	71 81       	ldd	r23, Z+1	; 0x01
    2bc8:	82 81       	ldd	r24, Z+2	; 0x02
    2bca:	93 81       	ldd	r25, Z+3	; 0x03
    2bcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	91 83       	std	Z+1, r25	; 0x01
    2bd8:	80 83       	st	Z, r24
    2bda:	de 01       	movw	r26, r28
    2bdc:	ab 5a       	subi	r26, 0xAB	; 171
    2bde:	bf 4f       	sbci	r27, 0xFF	; 255
    2be0:	fe 01       	movw	r30, r28
    2be2:	e7 5a       	subi	r30, 0xA7	; 167
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 81       	ld	r24, Z
    2be8:	91 81       	ldd	r25, Z+1	; 0x01
    2bea:	11 96       	adiw	r26, 0x01	; 1
    2bec:	9c 93       	st	X, r25
    2bee:	8e 93       	st	-X, r24
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	eb 5a       	subi	r30, 0xAB	; 171
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	80 81       	ld	r24, Z
    2bf8:	91 81       	ldd	r25, Z+1	; 0x01
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <main+0x800>
    2bfe:	fe 01       	movw	r30, r28
    2c00:	eb 5a       	subi	r30, 0xAB	; 171
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
    2c08:	4d cc       	rjmp	.-1894   	; 0x24a4 <main+0xaa>
		}
		// count up in index 0
		else if (up != 1 && Yindex == 0)
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e8 56       	subi	r30, 0x68	; 104
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 81       	ld	r24, Z
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <main+0x81e>
    2c16:	e8 c0       	rjmp	.+464    	; 0x2de8 <main+0x9ee>
    2c18:	fe 01       	movw	r30, r28
    2c1a:	ed 56       	subi	r30, 0x6D	; 109
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 23       	and	r24, r24
    2c22:	09 f0       	breq	.+2      	; 0x2c26 <main+0x82c>
    2c24:	e1 c0       	rjmp	.+450    	; 0x2de8 <main+0x9ee>
		{
			n++;
    2c26:	de 01       	movw	r26, r28
    2c28:	ae 56       	subi	r26, 0x6E	; 110
    2c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ee 56       	subi	r30, 0x6E	; 110
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	8f 5f       	subi	r24, 0xFF	; 255
    2c36:	8c 93       	st	X, r24
			if(n > 9 || n < 0){n = 0;}
    2c38:	fe 01       	movw	r30, r28
    2c3a:	ee 56       	subi	r30, 0x6E	; 110
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	8a 30       	cpi	r24, 0x0A	; 10
    2c42:	20 f0       	brcs	.+8      	; 0x2c4c <main+0x852>
    2c44:	fe 01       	movw	r30, r28
    2c46:	ee 56       	subi	r30, 0x6E	; 110
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	10 82       	st	Z, r1
			LCD_voidWriteNumber(n);
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ee 56       	subi	r30, 0x6E	; 110
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 81       	ld	r24, Z
    2c54:	88 2f       	mov	r24, r24
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_voidWriteNumber>
			LCD_u8GoToXY(0,Yindex);
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	ed 56       	subi	r30, 0x6D	; 109
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	60 81       	ld	r22, Z
    2c66:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
			_delay_ms(delay);
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e3 57       	subi	r30, 0x73	; 115
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	80 81       	ld	r24, Z
    2c72:	91 81       	ldd	r25, Z+1	; 0x01
    2c74:	cc 01       	movw	r24, r24
    2c76:	a0 e0       	ldi	r26, 0x00	; 0
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	fe 01       	movw	r30, r28
    2c88:	ef 5a       	subi	r30, 0xAF	; 175
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	8e 01       	movw	r16, r28
    2c96:	03 5b       	subi	r16, 0xB3	; 179
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ef 5a       	subi	r30, 0xAF	; 175
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	4a ef       	ldi	r20, 0xFA	; 250
    2cae:	54 e4       	ldi	r21, 0x44	; 68
    2cb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	f8 01       	movw	r30, r16
    2cba:	80 83       	st	Z, r24
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	a2 83       	std	Z+2, r26	; 0x02
    2cc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e3 5b       	subi	r30, 0xB3	; 179
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	44 f4       	brge	.+16     	; 0x2cf0 <main+0x8f6>
		__ticks = 1;
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e5 5b       	subi	r30, 0xB5	; 181
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
    2cee:	64 c0       	rjmp	.+200    	; 0x2db8 <main+0x9be>
	else if (__tmp > 65535)
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e3 5b       	subi	r30, 0xB3	; 179
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	3f ef       	ldi	r19, 0xFF	; 255
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	57 e4       	ldi	r21, 0x47	; 71
    2d06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	0c f0       	brlt	.+2      	; 0x2d10 <main+0x916>
    2d0e:	43 c0       	rjmp	.+134    	; 0x2d96 <main+0x99c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d10:	fe 01       	movw	r30, r28
    2d12:	ef 5a       	subi	r30, 0xAF	; 175
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	8e 01       	movw	r16, r28
    2d30:	05 5b       	subi	r16, 0xB5	; 181
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	f8 01       	movw	r30, r16
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
    2d46:	1f c0       	rjmp	.+62     	; 0x2d86 <main+0x98c>
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e7 5b       	subi	r30, 0xB7	; 183
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	88 ec       	ldi	r24, 0xC8	; 200
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
    2d56:	fe 01       	movw	r30, r28
    2d58:	e7 5b       	subi	r30, 0xB7	; 183
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <main+0x966>
    2d64:	fe 01       	movw	r30, r28
    2d66:	e7 5b       	subi	r30, 0xB7	; 183
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	de 01       	movw	r26, r28
    2d70:	a5 5b       	subi	r26, 0xB5	; 181
    2d72:	bf 4f       	sbci	r27, 0xFF	; 255
    2d74:	fe 01       	movw	r30, r28
    2d76:	e5 5b       	subi	r30, 0xB5	; 181
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 81       	ld	r24, Z
    2d7c:	91 81       	ldd	r25, Z+1	; 0x01
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	11 96       	adiw	r26, 0x01	; 1
    2d82:	9c 93       	st	X, r25
    2d84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	fe 01       	movw	r30, r28
    2d88:	e5 5b       	subi	r30, 0xB5	; 181
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	80 81       	ld	r24, Z
    2d8e:	91 81       	ldd	r25, Z+1	; 0x01
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	d1 f6       	brne	.-76     	; 0x2d48 <main+0x94e>
    2d94:	87 cb       	rjmp	.-2290   	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	8e 01       	movw	r16, r28
    2d98:	05 5b       	subi	r16, 0xB5	; 181
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e3 5b       	subi	r30, 0xB3	; 179
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	f8 01       	movw	r30, r16
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
    2db8:	de 01       	movw	r26, r28
    2dba:	a9 5b       	subi	r26, 0xB9	; 185
    2dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e5 5b       	subi	r30, 0xB5	; 181
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	11 96       	adiw	r26, 0x01	; 1
    2dca:	9c 93       	st	X, r25
    2dcc:	8e 93       	st	-X, r24
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e9 5b       	subi	r30, 0xB9	; 185
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <main+0x9de>
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e9 5b       	subi	r30, 0xB9	; 185
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	91 83       	std	Z+1, r25	; 0x01
    2de4:	80 83       	st	Z, r24
    2de6:	5e cb       	rjmp	.-2372   	; 0x24a4 <main+0xaa>
		}
		// count up in index 2
		else if (up != 1 && Yindex == 2)
    2de8:	fe 01       	movw	r30, r28
    2dea:	e8 56       	subi	r30, 0x68	; 104
    2dec:	ff 4f       	sbci	r31, 0xFF	; 255
    2dee:	80 81       	ld	r24, Z
    2df0:	81 30       	cpi	r24, 0x01	; 1
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <main+0x9fc>
    2df4:	b9 c0       	rjmp	.+370    	; 0x2f68 <main+0xb6e>
    2df6:	fe 01       	movw	r30, r28
    2df8:	ed 56       	subi	r30, 0x6D	; 109
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	82 30       	cpi	r24, 0x02	; 2
    2e00:	09 f0       	breq	.+2      	; 0x2e04 <main+0xa0a>
    2e02:	b2 c0       	rjmp	.+356    	; 0x2f68 <main+0xb6e>
		{
			n1++;
    2e04:	de 01       	movw	r26, r28
    2e06:	af 56       	subi	r26, 0x6F	; 111
    2e08:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	ef 56       	subi	r30, 0x6F	; 111
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	8f 5f       	subi	r24, 0xFF	; 255
    2e14:	8c 93       	st	X, r24
			if(n1 > 9 || n1 < 0){n1 = 0;}
    2e16:	fe 01       	movw	r30, r28
    2e18:	ef 56       	subi	r30, 0x6F	; 111
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	8a 30       	cpi	r24, 0x0A	; 10
    2e20:	20 f0       	brcs	.+8      	; 0x2e2a <main+0xa30>
    2e22:	fe 01       	movw	r30, r28
    2e24:	ef 56       	subi	r30, 0x6F	; 111
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	10 82       	st	Z, r1
			LCD_voidWriteNumber(n1);
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ef 56       	subi	r30, 0x6F	; 111
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 81       	ld	r24, Z
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_voidWriteNumber>
			LCD_u8GoToXY(0,Yindex);
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	ed 56       	subi	r30, 0x6D	; 109
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	60 81       	ld	r22, Z
    2e44:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
			_delay_ms(delay);
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e3 57       	subi	r30, 0x73	; 115
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 81       	ld	r24, Z
    2e50:	91 81       	ldd	r25, Z+1	; 0x01
    2e52:	cc 01       	movw	r24, r24
    2e54:	a0 e0       	ldi	r26, 0x00	; 0
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	fe 01       	movw	r30, r28
    2e66:	ed 5b       	subi	r30, 0xBD	; 189
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 83       	st	Z, r24
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	a2 83       	std	Z+2, r26	; 0x02
    2e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e72:	8e 01       	movw	r16, r28
    2e74:	01 5c       	subi	r16, 0xC1	; 193
    2e76:	1f 4f       	sbci	r17, 0xFF	; 255
    2e78:	fe 01       	movw	r30, r28
    2e7a:	ed 5b       	subi	r30, 0xBD	; 189
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	4a ef       	ldi	r20, 0xFA	; 250
    2e8c:	54 e4       	ldi	r21, 0x44	; 68
    2e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	f8 01       	movw	r30, r16
    2e98:	80 83       	st	Z, r24
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	a2 83       	std	Z+2, r26	; 0x02
    2e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ff 96       	adiw	r30, 0x3f	; 63
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e8       	ldi	r20, 0x80	; 128
    2eb2:	5f e3       	ldi	r21, 0x3F	; 63
    2eb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2eb8:	88 23       	and	r24, r24
    2eba:	2c f4       	brge	.+10     	; 0x2ec6 <main+0xacc>
		__ticks = 1;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9e af       	std	Y+62, r25	; 0x3e
    2ec2:	8d af       	std	Y+61, r24	; 0x3d
    2ec4:	46 c0       	rjmp	.+140    	; 0x2f52 <main+0xb58>
	else if (__tmp > 65535)
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	ff 96       	adiw	r30, 0x3f	; 63
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	3f ef       	ldi	r19, 0xFF	; 255
    2ed6:	4f e7       	ldi	r20, 0x7F	; 127
    2ed8:	57 e4       	ldi	r21, 0x47	; 71
    2eda:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ede:	18 16       	cp	r1, r24
    2ee0:	64 f5       	brge	.+88     	; 0x2f3a <main+0xb40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	ed 5b       	subi	r30, 0xBD	; 189
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	60 81       	ld	r22, Z
    2eea:	71 81       	ldd	r23, Z+1	; 0x01
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e2       	ldi	r20, 0x20	; 32
    2ef6:	51 e4       	ldi	r21, 0x41	; 65
    2ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	bc 01       	movw	r22, r24
    2f02:	cd 01       	movw	r24, r26
    2f04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	9e af       	std	Y+62, r25	; 0x3e
    2f0e:	8d af       	std	Y+61, r24	; 0x3d
    2f10:	0f c0       	rjmp	.+30     	; 0x2f30 <main+0xb36>
    2f12:	88 ec       	ldi	r24, 0xC8	; 200
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	9c af       	std	Y+60, r25	; 0x3c
    2f18:	8b af       	std	Y+59, r24	; 0x3b
    2f1a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f1c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <main+0xb24>
    2f22:	9c af       	std	Y+60, r25	; 0x3c
    2f24:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	9e af       	std	Y+62, r25	; 0x3e
    2f2e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f30:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f32:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	69 f7       	brne	.-38     	; 0x2f12 <main+0xb18>
    2f38:	b5 ca       	rjmp	.-2710   	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ff 96       	adiw	r30, 0x3f	; 63
    2f3e:	60 81       	ld	r22, Z
    2f40:	71 81       	ldd	r23, Z+1	; 0x01
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	9e af       	std	Y+62, r25	; 0x3e
    2f50:	8d af       	std	Y+61, r24	; 0x3d
    2f52:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f54:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f56:	9a af       	std	Y+58, r25	; 0x3a
    2f58:	89 af       	std	Y+57, r24	; 0x39
    2f5a:	89 ad       	ldd	r24, Y+57	; 0x39
    2f5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <main+0xb64>
    2f62:	9a af       	std	Y+58, r25	; 0x3a
    2f64:	89 af       	std	Y+57, r24	; 0x39
    2f66:	9e ca       	rjmp	.-2756   	; 0x24a4 <main+0xaa>
		}
		// count up in chars index 1
		else if (up != 1 && Yindex == 1)
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e8 56       	subi	r30, 0x68	; 104
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <main+0xb7c>
    2f74:	ad c0       	rjmp	.+346    	; 0x30d0 <main+0xcd6>
    2f76:	fe 01       	movw	r30, r28
    2f78:	ed 56       	subi	r30, 0x6D	; 109
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	80 81       	ld	r24, Z
    2f7e:	81 30       	cpi	r24, 0x01	; 1
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <main+0xb8a>
    2f82:	a6 c0       	rjmp	.+332    	; 0x30d0 <main+0xcd6>
		{
			n2++;
    2f84:	de 01       	movw	r26, r28
    2f86:	a0 57       	subi	r26, 0x70	; 112
    2f88:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	e0 57       	subi	r30, 0x70	; 112
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	80 81       	ld	r24, Z
    2f92:	8f 5f       	subi	r24, 0xFF	; 255
    2f94:	8c 93       	st	X, r24
			if (n2 < 0 || n2 > 3){n2 = 0;}
    2f96:	fe 01       	movw	r30, r28
    2f98:	e0 57       	subi	r30, 0x70	; 112
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	80 81       	ld	r24, Z
    2f9e:	84 30       	cpi	r24, 0x04	; 4
    2fa0:	20 f0       	brcs	.+8      	; 0x2faa <main+0xbb0>
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e0 57       	subi	r30, 0x70	; 112
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	10 82       	st	Z, r1
			LCD_voidWriteChar(arth[n2]);
    2faa:	fe 01       	movw	r30, r28
    2fac:	e0 57       	subi	r30, 0x70	; 112
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 81       	ld	r24, Z
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	ce 01       	movw	r24, r28
    2fb8:	8c 56       	subi	r24, 0x6C	; 108
    2fba:	9f 4f       	sbci	r25, 0xFF	; 255
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f3 1f       	adc	r31, r19
    2fc2:	80 81       	ld	r24, Z
    2fc4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_voidWriteChar>
			LCD_u8GoToXY(0,Yindex);
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ed 56       	subi	r30, 0x6D	; 109
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	60 81       	ld	r22, Z
    2fd2:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
			_delay_ms(delay);
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e3 57       	subi	r30, 0x73	; 115
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	cc 01       	movw	r24, r24
    2fe2:	a0 e0       	ldi	r26, 0x00	; 0
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	8d ab       	std	Y+53, r24	; 0x35
    2ff4:	9e ab       	std	Y+54, r25	; 0x36
    2ff6:	af ab       	std	Y+55, r26	; 0x37
    2ff8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffa:	6d a9       	ldd	r22, Y+53	; 0x35
    2ffc:	7e a9       	ldd	r23, Y+54	; 0x36
    2ffe:	8f a9       	ldd	r24, Y+55	; 0x37
    3000:	98 ad       	ldd	r25, Y+56	; 0x38
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4a ef       	ldi	r20, 0xFA	; 250
    3008:	54 e4       	ldi	r21, 0x44	; 68
    300a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	89 ab       	std	Y+49, r24	; 0x31
    3014:	9a ab       	std	Y+50, r25	; 0x32
    3016:	ab ab       	std	Y+51, r26	; 0x33
    3018:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    301a:	69 a9       	ldd	r22, Y+49	; 0x31
    301c:	7a a9       	ldd	r23, Y+50	; 0x32
    301e:	8b a9       	ldd	r24, Y+51	; 0x33
    3020:	9c a9       	ldd	r25, Y+52	; 0x34
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e8       	ldi	r20, 0x80	; 128
    3028:	5f e3       	ldi	r21, 0x3F	; 63
    302a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    302e:	88 23       	and	r24, r24
    3030:	2c f4       	brge	.+10     	; 0x303c <main+0xc42>
		__ticks = 1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	98 ab       	std	Y+48, r25	; 0x30
    3038:	8f a7       	std	Y+47, r24	; 0x2f
    303a:	3f c0       	rjmp	.+126    	; 0x30ba <main+0xcc0>
	else if (__tmp > 65535)
    303c:	69 a9       	ldd	r22, Y+49	; 0x31
    303e:	7a a9       	ldd	r23, Y+50	; 0x32
    3040:	8b a9       	ldd	r24, Y+51	; 0x33
    3042:	9c a9       	ldd	r25, Y+52	; 0x34
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	3f ef       	ldi	r19, 0xFF	; 255
    3048:	4f e7       	ldi	r20, 0x7F	; 127
    304a:	57 e4       	ldi	r21, 0x47	; 71
    304c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3050:	18 16       	cp	r1, r24
    3052:	4c f5       	brge	.+82     	; 0x30a6 <main+0xcac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3054:	6d a9       	ldd	r22, Y+53	; 0x35
    3056:	7e a9       	ldd	r23, Y+54	; 0x36
    3058:	8f a9       	ldd	r24, Y+55	; 0x37
    305a:	98 ad       	ldd	r25, Y+56	; 0x38
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e2       	ldi	r20, 0x20	; 32
    3062:	51 e4       	ldi	r21, 0x41	; 65
    3064:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	98 ab       	std	Y+48, r25	; 0x30
    307a:	8f a7       	std	Y+47, r24	; 0x2f
    307c:	0f c0       	rjmp	.+30     	; 0x309c <main+0xca2>
    307e:	88 ec       	ldi	r24, 0xC8	; 200
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	9e a7       	std	Y+46, r25	; 0x2e
    3084:	8d a7       	std	Y+45, r24	; 0x2d
    3086:	8d a5       	ldd	r24, Y+45	; 0x2d
    3088:	9e a5       	ldd	r25, Y+46	; 0x2e
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <main+0xc90>
    308e:	9e a7       	std	Y+46, r25	; 0x2e
    3090:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3092:	8f a5       	ldd	r24, Y+47	; 0x2f
    3094:	98 a9       	ldd	r25, Y+48	; 0x30
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	98 ab       	std	Y+48, r25	; 0x30
    309a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309c:	8f a5       	ldd	r24, Y+47	; 0x2f
    309e:	98 a9       	ldd	r25, Y+48	; 0x30
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	69 f7       	brne	.-38     	; 0x307e <main+0xc84>
    30a4:	ff c9       	rjmp	.-3074   	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a6:	69 a9       	ldd	r22, Y+49	; 0x31
    30a8:	7a a9       	ldd	r23, Y+50	; 0x32
    30aa:	8b a9       	ldd	r24, Y+51	; 0x33
    30ac:	9c a9       	ldd	r25, Y+52	; 0x34
    30ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	98 ab       	std	Y+48, r25	; 0x30
    30b8:	8f a7       	std	Y+47, r24	; 0x2f
    30ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    30bc:	98 a9       	ldd	r25, Y+48	; 0x30
    30be:	9c a7       	std	Y+44, r25	; 0x2c
    30c0:	8b a7       	std	Y+43, r24	; 0x2b
    30c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    30c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <main+0xccc>
    30ca:	9c a7       	std	Y+44, r25	; 0x2c
    30cc:	8b a7       	std	Y+43, r24	; 0x2b
    30ce:	ea c9       	rjmp	.-3116   	; 0x24a4 <main+0xaa>
		}
		// count down in index 0
		else if (down != 1 && Yindex == 0)
    30d0:	fe 01       	movw	r30, r28
    30d2:	e7 56       	subi	r30, 0x67	; 103
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	80 81       	ld	r24, Z
    30d8:	81 30       	cpi	r24, 0x01	; 1
    30da:	09 f4       	brne	.+2      	; 0x30de <main+0xce4>
    30dc:	a7 c0       	rjmp	.+334    	; 0x322c <main+0xe32>
    30de:	fe 01       	movw	r30, r28
    30e0:	ed 56       	subi	r30, 0x6D	; 109
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	88 23       	and	r24, r24
    30e8:	09 f0       	breq	.+2      	; 0x30ec <main+0xcf2>
    30ea:	a0 c0       	rjmp	.+320    	; 0x322c <main+0xe32>
		{
			n--;
    30ec:	de 01       	movw	r26, r28
    30ee:	ae 56       	subi	r26, 0x6E	; 110
    30f0:	bf 4f       	sbci	r27, 0xFF	; 255
    30f2:	fe 01       	movw	r30, r28
    30f4:	ee 56       	subi	r30, 0x6E	; 110
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	80 81       	ld	r24, Z
    30fa:	81 50       	subi	r24, 0x01	; 1
    30fc:	8c 93       	st	X, r24
			if(n > 9 || n < 0){n = 9;}
    30fe:	fe 01       	movw	r30, r28
    3100:	ee 56       	subi	r30, 0x6E	; 110
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	80 81       	ld	r24, Z
    3106:	8a 30       	cpi	r24, 0x0A	; 10
    3108:	28 f0       	brcs	.+10     	; 0x3114 <main+0xd1a>
    310a:	fe 01       	movw	r30, r28
    310c:	ee 56       	subi	r30, 0x6E	; 110
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	89 e0       	ldi	r24, 0x09	; 9
    3112:	80 83       	st	Z, r24
			LCD_voidWriteNumber(n);
    3114:	fe 01       	movw	r30, r28
    3116:	ee 56       	subi	r30, 0x6E	; 110
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	80 81       	ld	r24, Z
    311c:	88 2f       	mov	r24, r24
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_voidWriteNumber>
			LCD_u8GoToXY(0,Yindex);
    3124:	fe 01       	movw	r30, r28
    3126:	ed 56       	subi	r30, 0x6D	; 109
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	60 81       	ld	r22, Z
    312e:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
			_delay_ms(delay);
    3132:	fe 01       	movw	r30, r28
    3134:	e3 57       	subi	r30, 0x73	; 115
    3136:	ff 4f       	sbci	r31, 0xFF	; 255
    3138:	80 81       	ld	r24, Z
    313a:	91 81       	ldd	r25, Z+1	; 0x01
    313c:	cc 01       	movw	r24, r24
    313e:	a0 e0       	ldi	r26, 0x00	; 0
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	bc 01       	movw	r22, r24
    3144:	cd 01       	movw	r24, r26
    3146:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	8f a3       	std	Y+39, r24	; 0x27
    3150:	98 a7       	std	Y+40, r25	; 0x28
    3152:	a9 a7       	std	Y+41, r26	; 0x29
    3154:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3156:	6f a1       	ldd	r22, Y+39	; 0x27
    3158:	78 a5       	ldd	r23, Y+40	; 0x28
    315a:	89 a5       	ldd	r24, Y+41	; 0x29
    315c:	9a a5       	ldd	r25, Y+42	; 0x2a
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	4a ef       	ldi	r20, 0xFA	; 250
    3164:	54 e4       	ldi	r21, 0x44	; 68
    3166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	8b a3       	std	Y+35, r24	; 0x23
    3170:	9c a3       	std	Y+36, r25	; 0x24
    3172:	ad a3       	std	Y+37, r26	; 0x25
    3174:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3176:	6b a1       	ldd	r22, Y+35	; 0x23
    3178:	7c a1       	ldd	r23, Y+36	; 0x24
    317a:	8d a1       	ldd	r24, Y+37	; 0x25
    317c:	9e a1       	ldd	r25, Y+38	; 0x26
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e8       	ldi	r20, 0x80	; 128
    3184:	5f e3       	ldi	r21, 0x3F	; 63
    3186:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    318a:	88 23       	and	r24, r24
    318c:	2c f4       	brge	.+10     	; 0x3198 <main+0xd9e>
		__ticks = 1;
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	9a a3       	std	Y+34, r25	; 0x22
    3194:	89 a3       	std	Y+33, r24	; 0x21
    3196:	3f c0       	rjmp	.+126    	; 0x3216 <main+0xe1c>
	else if (__tmp > 65535)
    3198:	6b a1       	ldd	r22, Y+35	; 0x23
    319a:	7c a1       	ldd	r23, Y+36	; 0x24
    319c:	8d a1       	ldd	r24, Y+37	; 0x25
    319e:	9e a1       	ldd	r25, Y+38	; 0x26
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	3f ef       	ldi	r19, 0xFF	; 255
    31a4:	4f e7       	ldi	r20, 0x7F	; 127
    31a6:	57 e4       	ldi	r21, 0x47	; 71
    31a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    31ac:	18 16       	cp	r1, r24
    31ae:	4c f5       	brge	.+82     	; 0x3202 <main+0xe08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b0:	6f a1       	ldd	r22, Y+39	; 0x27
    31b2:	78 a5       	ldd	r23, Y+40	; 0x28
    31b4:	89 a5       	ldd	r24, Y+41	; 0x29
    31b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	40 e2       	ldi	r20, 0x20	; 32
    31be:	51 e4       	ldi	r21, 0x41	; 65
    31c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	9a a3       	std	Y+34, r25	; 0x22
    31d6:	89 a3       	std	Y+33, r24	; 0x21
    31d8:	0f c0       	rjmp	.+30     	; 0x31f8 <main+0xdfe>
    31da:	88 ec       	ldi	r24, 0xC8	; 200
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	98 a3       	std	Y+32, r25	; 0x20
    31e0:	8f 8f       	std	Y+31, r24	; 0x1f
    31e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31e4:	98 a1       	ldd	r25, Y+32	; 0x20
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <main+0xdec>
    31ea:	98 a3       	std	Y+32, r25	; 0x20
    31ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ee:	89 a1       	ldd	r24, Y+33	; 0x21
    31f0:	9a a1       	ldd	r25, Y+34	; 0x22
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	9a a3       	std	Y+34, r25	; 0x22
    31f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f8:	89 a1       	ldd	r24, Y+33	; 0x21
    31fa:	9a a1       	ldd	r25, Y+34	; 0x22
    31fc:	00 97       	sbiw	r24, 0x00	; 0
    31fe:	69 f7       	brne	.-38     	; 0x31da <main+0xde0>
    3200:	51 c9       	rjmp	.-3422   	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3202:	6b a1       	ldd	r22, Y+35	; 0x23
    3204:	7c a1       	ldd	r23, Y+36	; 0x24
    3206:	8d a1       	ldd	r24, Y+37	; 0x25
    3208:	9e a1       	ldd	r25, Y+38	; 0x26
    320a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9a a3       	std	Y+34, r25	; 0x22
    3214:	89 a3       	std	Y+33, r24	; 0x21
    3216:	89 a1       	ldd	r24, Y+33	; 0x21
    3218:	9a a1       	ldd	r25, Y+34	; 0x22
    321a:	9e 8f       	std	Y+30, r25	; 0x1e
    321c:	8d 8f       	std	Y+29, r24	; 0x1d
    321e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3220:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <main+0xe28>
    3226:	9e 8f       	std	Y+30, r25	; 0x1e
    3228:	8d 8f       	std	Y+29, r24	; 0x1d
    322a:	3c c9       	rjmp	.-3464   	; 0x24a4 <main+0xaa>
		}
		// count down in index 2
		else if (down != 1 && Yindex == 2)
    322c:	fe 01       	movw	r30, r28
    322e:	e7 56       	subi	r30, 0x67	; 103
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	81 30       	cpi	r24, 0x01	; 1
    3236:	09 f4       	brne	.+2      	; 0x323a <main+0xe40>
    3238:	a7 c0       	rjmp	.+334    	; 0x3388 <main+0xf8e>
    323a:	fe 01       	movw	r30, r28
    323c:	ed 56       	subi	r30, 0x6D	; 109
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 81       	ld	r24, Z
    3242:	82 30       	cpi	r24, 0x02	; 2
    3244:	09 f0       	breq	.+2      	; 0x3248 <main+0xe4e>
    3246:	a0 c0       	rjmp	.+320    	; 0x3388 <main+0xf8e>
		{
			n1--;
    3248:	de 01       	movw	r26, r28
    324a:	af 56       	subi	r26, 0x6F	; 111
    324c:	bf 4f       	sbci	r27, 0xFF	; 255
    324e:	fe 01       	movw	r30, r28
    3250:	ef 56       	subi	r30, 0x6F	; 111
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	81 50       	subi	r24, 0x01	; 1
    3258:	8c 93       	st	X, r24
			if(n1 > 9 || n1 < 0){n1 = 9;}
    325a:	fe 01       	movw	r30, r28
    325c:	ef 56       	subi	r30, 0x6F	; 111
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	80 81       	ld	r24, Z
    3262:	8a 30       	cpi	r24, 0x0A	; 10
    3264:	28 f0       	brcs	.+10     	; 0x3270 <main+0xe76>
    3266:	fe 01       	movw	r30, r28
    3268:	ef 56       	subi	r30, 0x6F	; 111
    326a:	ff 4f       	sbci	r31, 0xFF	; 255
    326c:	89 e0       	ldi	r24, 0x09	; 9
    326e:	80 83       	st	Z, r24
			LCD_voidWriteNumber(n1);
    3270:	fe 01       	movw	r30, r28
    3272:	ef 56       	subi	r30, 0x6F	; 111
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	80 81       	ld	r24, Z
    3278:	88 2f       	mov	r24, r24
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	0e 94 23 11 	call	0x2246	; 0x2246 <LCD_voidWriteNumber>
			LCD_u8GoToXY(0,Yindex);
    3280:	fe 01       	movw	r30, r28
    3282:	ed 56       	subi	r30, 0x6D	; 109
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	60 81       	ld	r22, Z
    328a:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
			_delay_ms(delay);
    328e:	fe 01       	movw	r30, r28
    3290:	e3 57       	subi	r30, 0x73	; 115
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	cc 01       	movw	r24, r24
    329a:	a0 e0       	ldi	r26, 0x00	; 0
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	bc 01       	movw	r22, r24
    32a0:	cd 01       	movw	r24, r26
    32a2:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	89 8f       	std	Y+25, r24	; 0x19
    32ac:	9a 8f       	std	Y+26, r25	; 0x1a
    32ae:	ab 8f       	std	Y+27, r26	; 0x1b
    32b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b2:	69 8d       	ldd	r22, Y+25	; 0x19
    32b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	4a ef       	ldi	r20, 0xFA	; 250
    32c0:	54 e4       	ldi	r21, 0x44	; 68
    32c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	8d 8b       	std	Y+21, r24	; 0x15
    32cc:	9e 8b       	std	Y+22, r25	; 0x16
    32ce:	af 8b       	std	Y+23, r26	; 0x17
    32d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32d2:	6d 89       	ldd	r22, Y+21	; 0x15
    32d4:	7e 89       	ldd	r23, Y+22	; 0x16
    32d6:	8f 89       	ldd	r24, Y+23	; 0x17
    32d8:	98 8d       	ldd	r25, Y+24	; 0x18
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	40 e8       	ldi	r20, 0x80	; 128
    32e0:	5f e3       	ldi	r21, 0x3F	; 63
    32e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    32e6:	88 23       	and	r24, r24
    32e8:	2c f4       	brge	.+10     	; 0x32f4 <main+0xefa>
		__ticks = 1;
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	9c 8b       	std	Y+20, r25	; 0x14
    32f0:	8b 8b       	std	Y+19, r24	; 0x13
    32f2:	3f c0       	rjmp	.+126    	; 0x3372 <main+0xf78>
	else if (__tmp > 65535)
    32f4:	6d 89       	ldd	r22, Y+21	; 0x15
    32f6:	7e 89       	ldd	r23, Y+22	; 0x16
    32f8:	8f 89       	ldd	r24, Y+23	; 0x17
    32fa:	98 8d       	ldd	r25, Y+24	; 0x18
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	3f ef       	ldi	r19, 0xFF	; 255
    3300:	4f e7       	ldi	r20, 0x7F	; 127
    3302:	57 e4       	ldi	r21, 0x47	; 71
    3304:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3308:	18 16       	cp	r1, r24
    330a:	4c f5       	brge	.+82     	; 0x335e <main+0xf64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330c:	69 8d       	ldd	r22, Y+25	; 0x19
    330e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	40 e2       	ldi	r20, 0x20	; 32
    331a:	51 e4       	ldi	r21, 0x41	; 65
    331c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	bc 01       	movw	r22, r24
    3326:	cd 01       	movw	r24, r26
    3328:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	9c 8b       	std	Y+20, r25	; 0x14
    3332:	8b 8b       	std	Y+19, r24	; 0x13
    3334:	0f c0       	rjmp	.+30     	; 0x3354 <main+0xf5a>
    3336:	88 ec       	ldi	r24, 0xC8	; 200
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	9a 8b       	std	Y+18, r25	; 0x12
    333c:	89 8b       	std	Y+17, r24	; 0x11
    333e:	89 89       	ldd	r24, Y+17	; 0x11
    3340:	9a 89       	ldd	r25, Y+18	; 0x12
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	f1 f7       	brne	.-4      	; 0x3342 <main+0xf48>
    3346:	9a 8b       	std	Y+18, r25	; 0x12
    3348:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334a:	8b 89       	ldd	r24, Y+19	; 0x13
    334c:	9c 89       	ldd	r25, Y+20	; 0x14
    334e:	01 97       	sbiw	r24, 0x01	; 1
    3350:	9c 8b       	std	Y+20, r25	; 0x14
    3352:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3354:	8b 89       	ldd	r24, Y+19	; 0x13
    3356:	9c 89       	ldd	r25, Y+20	; 0x14
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	69 f7       	brne	.-38     	; 0x3336 <main+0xf3c>
    335c:	a3 c8       	rjmp	.-3770   	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335e:	6d 89       	ldd	r22, Y+21	; 0x15
    3360:	7e 89       	ldd	r23, Y+22	; 0x16
    3362:	8f 89       	ldd	r24, Y+23	; 0x17
    3364:	98 8d       	ldd	r25, Y+24	; 0x18
    3366:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	9c 8b       	std	Y+20, r25	; 0x14
    3370:	8b 8b       	std	Y+19, r24	; 0x13
    3372:	8b 89       	ldd	r24, Y+19	; 0x13
    3374:	9c 89       	ldd	r25, Y+20	; 0x14
    3376:	98 8b       	std	Y+16, r25	; 0x10
    3378:	8f 87       	std	Y+15, r24	; 0x0f
    337a:	8f 85       	ldd	r24, Y+15	; 0x0f
    337c:	98 89       	ldd	r25, Y+16	; 0x10
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	f1 f7       	brne	.-4      	; 0x337e <main+0xf84>
    3382:	98 8b       	std	Y+16, r25	; 0x10
    3384:	8f 87       	std	Y+15, r24	; 0x0f
    3386:	8e c8       	rjmp	.-3812   	; 0x24a4 <main+0xaa>
		}
		// count down chars in index 1
		else if (down != 1 && Yindex == 1)
    3388:	fe 01       	movw	r30, r28
    338a:	e7 56       	subi	r30, 0x67	; 103
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	80 81       	ld	r24, Z
    3390:	81 30       	cpi	r24, 0x01	; 1
    3392:	09 f4       	brne	.+2      	; 0x3396 <main+0xf9c>
    3394:	87 c8       	rjmp	.-3826   	; 0x24a4 <main+0xaa>
    3396:	fe 01       	movw	r30, r28
    3398:	ed 56       	subi	r30, 0x6D	; 109
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	80 81       	ld	r24, Z
    339e:	81 30       	cpi	r24, 0x01	; 1
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <main+0xfaa>
    33a2:	80 c8       	rjmp	.-3840   	; 0x24a4 <main+0xaa>
		{
			n2--;
    33a4:	de 01       	movw	r26, r28
    33a6:	a0 57       	subi	r26, 0x70	; 112
    33a8:	bf 4f       	sbci	r27, 0xFF	; 255
    33aa:	fe 01       	movw	r30, r28
    33ac:	e0 57       	subi	r30, 0x70	; 112
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	80 81       	ld	r24, Z
    33b2:	81 50       	subi	r24, 0x01	; 1
    33b4:	8c 93       	st	X, r24
			if (n2 < 0 || n2 > 3){n2 = 3;}
    33b6:	fe 01       	movw	r30, r28
    33b8:	e0 57       	subi	r30, 0x70	; 112
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	80 81       	ld	r24, Z
    33be:	84 30       	cpi	r24, 0x04	; 4
    33c0:	28 f0       	brcs	.+10     	; 0x33cc <main+0xfd2>
    33c2:	fe 01       	movw	r30, r28
    33c4:	e0 57       	subi	r30, 0x70	; 112
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	83 e0       	ldi	r24, 0x03	; 3
    33ca:	80 83       	st	Z, r24
			LCD_u8GoToXY(0,Yindex);
    33cc:	fe 01       	movw	r30, r28
    33ce:	ed 56       	subi	r30, 0x6D	; 109
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	60 81       	ld	r22, Z
    33d6:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_u8GoToXY>
			LCD_voidWriteChar(arth[n2]);
    33da:	fe 01       	movw	r30, r28
    33dc:	e0 57       	subi	r30, 0x70	; 112
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 81       	ld	r24, Z
    33e2:	28 2f       	mov	r18, r24
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	ce 01       	movw	r24, r28
    33e8:	8c 56       	subi	r24, 0x6C	; 108
    33ea:	9f 4f       	sbci	r25, 0xFF	; 255
    33ec:	fc 01       	movw	r30, r24
    33ee:	e2 0f       	add	r30, r18
    33f0:	f3 1f       	adc	r31, r19
    33f2:	80 81       	ld	r24, Z
    33f4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LCD_voidWriteChar>
			_delay_ms(delay);
    33f8:	fe 01       	movw	r30, r28
    33fa:	e3 57       	subi	r30, 0x73	; 115
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	80 81       	ld	r24, Z
    3400:	91 81       	ldd	r25, Z+1	; 0x01
    3402:	cc 01       	movw	r24, r24
    3404:	a0 e0       	ldi	r26, 0x00	; 0
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	8b 87       	std	Y+11, r24	; 0x0b
    3416:	9c 87       	std	Y+12, r25	; 0x0c
    3418:	ad 87       	std	Y+13, r26	; 0x0d
    341a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341c:	6b 85       	ldd	r22, Y+11	; 0x0b
    341e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3420:	8d 85       	ldd	r24, Y+13	; 0x0d
    3422:	9e 85       	ldd	r25, Y+14	; 0x0e
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	4a ef       	ldi	r20, 0xFA	; 250
    342a:	54 e4       	ldi	r21, 0x44	; 68
    342c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	8f 83       	std	Y+7, r24	; 0x07
    3436:	98 87       	std	Y+8, r25	; 0x08
    3438:	a9 87       	std	Y+9, r26	; 0x09
    343a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    343c:	6f 81       	ldd	r22, Y+7	; 0x07
    343e:	78 85       	ldd	r23, Y+8	; 0x08
    3440:	89 85       	ldd	r24, Y+9	; 0x09
    3442:	9a 85       	ldd	r25, Y+10	; 0x0a
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e8       	ldi	r20, 0x80	; 128
    344a:	5f e3       	ldi	r21, 0x3F	; 63
    344c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3450:	88 23       	and	r24, r24
    3452:	2c f4       	brge	.+10     	; 0x345e <main+0x1064>
		__ticks = 1;
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
    345c:	40 c0       	rjmp	.+128    	; 0x34de <main+0x10e4>
	else if (__tmp > 65535)
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	3f ef       	ldi	r19, 0xFF	; 255
    346a:	4f e7       	ldi	r20, 0x7F	; 127
    346c:	57 e4       	ldi	r21, 0x47	; 71
    346e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3472:	18 16       	cp	r1, r24
    3474:	54 f5       	brge	.+84     	; 0x34ca <main+0x10d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3476:	6b 85       	ldd	r22, Y+11	; 0x0b
    3478:	7c 85       	ldd	r23, Y+12	; 0x0c
    347a:	8d 85       	ldd	r24, Y+13	; 0x0d
    347c:	9e 85       	ldd	r25, Y+14	; 0x0e
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	40 e2       	ldi	r20, 0x20	; 32
    3484:	51 e4       	ldi	r21, 0x41	; 65
    3486:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	bc 01       	movw	r22, r24
    3490:	cd 01       	movw	r24, r26
    3492:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
    349e:	0f c0       	rjmp	.+30     	; 0x34be <main+0x10c4>
    34a0:	88 ec       	ldi	r24, 0xC8	; 200
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	9c 83       	std	Y+4, r25	; 0x04
    34a6:	8b 83       	std	Y+3, r24	; 0x03
    34a8:	8b 81       	ldd	r24, Y+3	; 0x03
    34aa:	9c 81       	ldd	r25, Y+4	; 0x04
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <main+0x10b2>
    34b0:	9c 83       	std	Y+4, r25	; 0x04
    34b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b4:	8d 81       	ldd	r24, Y+5	; 0x05
    34b6:	9e 81       	ldd	r25, Y+6	; 0x06
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	9e 83       	std	Y+6, r25	; 0x06
    34bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34be:	8d 81       	ldd	r24, Y+5	; 0x05
    34c0:	9e 81       	ldd	r25, Y+6	; 0x06
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	69 f7       	brne	.-38     	; 0x34a0 <main+0x10a6>
    34c6:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <main+0xaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ca:	6f 81       	ldd	r22, Y+7	; 0x07
    34cc:	78 85       	ldd	r23, Y+8	; 0x08
    34ce:	89 85       	ldd	r24, Y+9	; 0x09
    34d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9e 83       	std	Y+6, r25	; 0x06
    34dc:	8d 83       	std	Y+5, r24	; 0x05
    34de:	8d 81       	ldd	r24, Y+5	; 0x05
    34e0:	9e 81       	ldd	r25, Y+6	; 0x06
    34e2:	9a 83       	std	Y+2, r25	; 0x02
    34e4:	89 83       	std	Y+1, r24	; 0x01
    34e6:	89 81       	ldd	r24, Y+1	; 0x01
    34e8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	f1 f7       	brne	.-4      	; 0x34ea <main+0x10f0>
    34ee:	9a 83       	std	Y+2, r25	; 0x02
    34f0:	89 83       	std	Y+1, r24	; 0x01
    34f2:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <main+0xaa>

000034f6 <calc>:
	}
	return 0;
}
// function for the calculations
u8 calc (u8 n, u8 n1, u8 n2)
{
    34f6:	df 93       	push	r29
    34f8:	cf 93       	push	r28
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <calc+0x6>
    34fc:	00 d0       	rcall	.+0      	; 0x34fe <calc+0x8>
    34fe:	00 d0       	rcall	.+0      	; 0x3500 <calc+0xa>
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
    3504:	8a 83       	std	Y+2, r24	; 0x02
    3506:	6b 83       	std	Y+3, r22	; 0x03
    3508:	4c 83       	std	Y+4, r20	; 0x04
	u8 r = 0;
    350a:	19 82       	std	Y+1, r1	; 0x01
	switch (n2)
    350c:	8c 81       	ldd	r24, Y+4	; 0x04
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	3e 83       	std	Y+6, r19	; 0x06
    3514:	2d 83       	std	Y+5, r18	; 0x05
    3516:	8d 81       	ldd	r24, Y+5	; 0x05
    3518:	9e 81       	ldd	r25, Y+6	; 0x06
    351a:	81 30       	cpi	r24, 0x01	; 1
    351c:	91 05       	cpc	r25, r1
    351e:	d1 f0       	breq	.+52     	; 0x3554 <calc+0x5e>
    3520:	2d 81       	ldd	r18, Y+5	; 0x05
    3522:	3e 81       	ldd	r19, Y+6	; 0x06
    3524:	22 30       	cpi	r18, 0x02	; 2
    3526:	31 05       	cpc	r19, r1
    3528:	2c f4       	brge	.+10     	; 0x3534 <calc+0x3e>
    352a:	8d 81       	ldd	r24, Y+5	; 0x05
    352c:	9e 81       	ldd	r25, Y+6	; 0x06
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	61 f0       	breq	.+24     	; 0x354a <calc+0x54>
    3532:	2f c0       	rjmp	.+94     	; 0x3592 <calc+0x9c>
    3534:	2d 81       	ldd	r18, Y+5	; 0x05
    3536:	3e 81       	ldd	r19, Y+6	; 0x06
    3538:	22 30       	cpi	r18, 0x02	; 2
    353a:	31 05       	cpc	r19, r1
    353c:	b9 f0       	breq	.+46     	; 0x356c <calc+0x76>
    353e:	8d 81       	ldd	r24, Y+5	; 0x05
    3540:	9e 81       	ldd	r25, Y+6	; 0x06
    3542:	83 30       	cpi	r24, 0x03	; 3
    3544:	91 05       	cpc	r25, r1
    3546:	c9 f0       	breq	.+50     	; 0x357a <calc+0x84>
    3548:	24 c0       	rjmp	.+72     	; 0x3592 <calc+0x9c>
	{
	case 0 : r = n + n1;break;
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	9b 81       	ldd	r25, Y+3	; 0x03
    354e:	89 0f       	add	r24, r25
    3550:	89 83       	std	Y+1, r24	; 0x01
    3552:	1f c0       	rjmp	.+62     	; 0x3592 <calc+0x9c>
	case 1 :
		if (n1 > n)
    3554:	9b 81       	ldd	r25, Y+3	; 0x03
    3556:	8a 81       	ldd	r24, Y+2	; 0x02
    3558:	89 17       	cp	r24, r25
    355a:	18 f4       	brcc	.+6      	; 0x3562 <calc+0x6c>
		r = 255;
    355c:	8f ef       	ldi	r24, 0xFF	; 255
    355e:	89 83       	std	Y+1, r24	; 0x01
    3560:	18 c0       	rjmp	.+48     	; 0x3592 <calc+0x9c>
		else
		r = n - n1;
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	9b 81       	ldd	r25, Y+3	; 0x03
    3566:	89 1b       	sub	r24, r25
    3568:	89 83       	std	Y+1, r24	; 0x01
    356a:	13 c0       	rjmp	.+38     	; 0x3592 <calc+0x9c>
		break;
	case 2 : r = n * n1;break;
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	9b 81       	ldd	r25, Y+3	; 0x03
    3570:	89 9f       	mul	r24, r25
    3572:	80 2d       	mov	r24, r0
    3574:	11 24       	eor	r1, r1
    3576:	89 83       	std	Y+1, r24	; 0x01
    3578:	0c c0       	rjmp	.+24     	; 0x3592 <calc+0x9c>
	case 3 :
		if (n1 == 0)
    357a:	8b 81       	ldd	r24, Y+3	; 0x03
    357c:	88 23       	and	r24, r24
    357e:	19 f4       	brne	.+6      	; 0x3586 <calc+0x90>
			r = 255;
    3580:	8f ef       	ldi	r24, 0xFF	; 255
    3582:	89 83       	std	Y+1, r24	; 0x01
    3584:	06 c0       	rjmp	.+12     	; 0x3592 <calc+0x9c>
		else
		r = n / n1;
    3586:	8a 81       	ldd	r24, Y+2	; 0x02
    3588:	9b 81       	ldd	r25, Y+3	; 0x03
    358a:	69 2f       	mov	r22, r25
    358c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__udivmodqi4>
    3590:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return r;
    3592:	89 81       	ldd	r24, Y+1	; 0x01
}
    3594:	26 96       	adiw	r28, 0x06	; 6
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <__udivmodqi4>:
    35a6:	99 1b       	sub	r25, r25
    35a8:	79 e0       	ldi	r23, 0x09	; 9
    35aa:	04 c0       	rjmp	.+8      	; 0x35b4 <__udivmodqi4_ep>

000035ac <__udivmodqi4_loop>:
    35ac:	99 1f       	adc	r25, r25
    35ae:	96 17       	cp	r25, r22
    35b0:	08 f0       	brcs	.+2      	; 0x35b4 <__udivmodqi4_ep>
    35b2:	96 1b       	sub	r25, r22

000035b4 <__udivmodqi4_ep>:
    35b4:	88 1f       	adc	r24, r24
    35b6:	7a 95       	dec	r23
    35b8:	c9 f7       	brne	.-14     	; 0x35ac <__udivmodqi4_loop>
    35ba:	80 95       	com	r24
    35bc:	08 95       	ret

000035be <__udivmodhi4>:
    35be:	aa 1b       	sub	r26, r26
    35c0:	bb 1b       	sub	r27, r27
    35c2:	51 e1       	ldi	r21, 0x11	; 17
    35c4:	07 c0       	rjmp	.+14     	; 0x35d4 <__udivmodhi4_ep>

000035c6 <__udivmodhi4_loop>:
    35c6:	aa 1f       	adc	r26, r26
    35c8:	bb 1f       	adc	r27, r27
    35ca:	a6 17       	cp	r26, r22
    35cc:	b7 07       	cpc	r27, r23
    35ce:	10 f0       	brcs	.+4      	; 0x35d4 <__udivmodhi4_ep>
    35d0:	a6 1b       	sub	r26, r22
    35d2:	b7 0b       	sbc	r27, r23

000035d4 <__udivmodhi4_ep>:
    35d4:	88 1f       	adc	r24, r24
    35d6:	99 1f       	adc	r25, r25
    35d8:	5a 95       	dec	r21
    35da:	a9 f7       	brne	.-22     	; 0x35c6 <__udivmodhi4_loop>
    35dc:	80 95       	com	r24
    35de:	90 95       	com	r25
    35e0:	bc 01       	movw	r22, r24
    35e2:	cd 01       	movw	r24, r26
    35e4:	08 95       	ret

000035e6 <__prologue_saves__>:
    35e6:	2f 92       	push	r2
    35e8:	3f 92       	push	r3
    35ea:	4f 92       	push	r4
    35ec:	5f 92       	push	r5
    35ee:	6f 92       	push	r6
    35f0:	7f 92       	push	r7
    35f2:	8f 92       	push	r8
    35f4:	9f 92       	push	r9
    35f6:	af 92       	push	r10
    35f8:	bf 92       	push	r11
    35fa:	cf 92       	push	r12
    35fc:	df 92       	push	r13
    35fe:	ef 92       	push	r14
    3600:	ff 92       	push	r15
    3602:	0f 93       	push	r16
    3604:	1f 93       	push	r17
    3606:	cf 93       	push	r28
    3608:	df 93       	push	r29
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	ca 1b       	sub	r28, r26
    3610:	db 0b       	sbc	r29, r27
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	09 94       	ijmp

0000361e <__epilogue_restores__>:
    361e:	2a 88       	ldd	r2, Y+18	; 0x12
    3620:	39 88       	ldd	r3, Y+17	; 0x11
    3622:	48 88       	ldd	r4, Y+16	; 0x10
    3624:	5f 84       	ldd	r5, Y+15	; 0x0f
    3626:	6e 84       	ldd	r6, Y+14	; 0x0e
    3628:	7d 84       	ldd	r7, Y+13	; 0x0d
    362a:	8c 84       	ldd	r8, Y+12	; 0x0c
    362c:	9b 84       	ldd	r9, Y+11	; 0x0b
    362e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3630:	b9 84       	ldd	r11, Y+9	; 0x09
    3632:	c8 84       	ldd	r12, Y+8	; 0x08
    3634:	df 80       	ldd	r13, Y+7	; 0x07
    3636:	ee 80       	ldd	r14, Y+6	; 0x06
    3638:	fd 80       	ldd	r15, Y+5	; 0x05
    363a:	0c 81       	ldd	r16, Y+4	; 0x04
    363c:	1b 81       	ldd	r17, Y+3	; 0x03
    363e:	aa 81       	ldd	r26, Y+2	; 0x02
    3640:	b9 81       	ldd	r27, Y+1	; 0x01
    3642:	ce 0f       	add	r28, r30
    3644:	d1 1d       	adc	r29, r1
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
    3650:	ed 01       	movw	r28, r26
    3652:	08 95       	ret

00003654 <_exit>:
    3654:	f8 94       	cli

00003656 <__stop_program>:
    3656:	ff cf       	rjmp	.-2      	; 0x3656 <__stop_program>
